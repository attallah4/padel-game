
Padel_Game.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000102c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000074  00800060  0000102c  000010c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  008000d4  008000d4  00001134  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001134  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001164  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000430  00000000  00000000  000011a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003170  00000000  00000000  000015d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ffa  00000000  00000000  00004740  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b7b  00000000  00000000  0000573a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b60  00000000  00000000  000072b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001179  00000000  00000000  00007e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000240b  00000000  00000000  00008f91  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000378  00000000  00000000  0000b39c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 e7 05 	jmp	0xbce	; 0xbce <__vector_1>
       8:	0c 94 10 06 	jmp	0xc20	; 0xc20 <__vector_2>
       c:	0c 94 39 06 	jmp	0xc72	; 0xc72 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 58 07 	jmp	0xeb0	; 0xeb0 <__vector_6>
      1c:	0c 94 06 07 	jmp	0xe0c	; 0xe0c <__vector_7>
      20:	0c 94 2f 07 	jmp	0xe5e	; 0xe5e <__vector_8>
      24:	0c 94 dd 06 	jmp	0xdba	; 0xdba <__vector_9>
      28:	0c 94 b4 06 	jmp	0xd68	; 0xd68 <__vector_10>
      2c:	0c 94 8b 06 	jmp	0xd16	; 0xd16 <__vector_11>
      30:	0c 94 62 06 	jmp	0xcc4	; 0xcc4 <__vector_12>
      34:	0c 94 81 07 	jmp	0xf02	; 0xf02 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 aa 07 	jmp	0xf54	; 0xf54 <__vector_15>
      40:	0c 94 fb 03 	jmp	0x7f6	; 0x7f6 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e2       	ldi	r30, 0x2C	; 44
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 3d       	cpi	r26, 0xD4	; 212
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a4 ed       	ldi	r26, 0xD4	; 212
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3f       	cpi	r26, 0xF0	; 240
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f6 03 	call	0x7ec	; 0x7ec <main>
      8a:	0c 94 14 08 	jmp	0x1028	; 0x1028 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Padel_Init>:
BUTTON_STATUS_t R_Button =NOT_PRESSED;

/***************************************/
void Padel_Init(void)
{
	DIO_Init();
      92:	0e 94 21 05 	call	0xa42	; 0xa42 <DIO_Init>
	LCD_Init();
      96:	0e 94 1c 03 	call	0x638	; 0x638 <LCD_Init>
	LCD_CustomerChar(1,Hamoksha);
      9a:	6f e6       	ldi	r22, 0x6F	; 111
      9c:	70 e0       	ldi	r23, 0x00	; 0
      9e:	81 e0       	ldi	r24, 0x01	; 1
      a0:	0e 94 cc 03 	call	0x798	; 0x798 <LCD_CustomerChar>
	LCD_CustomerChar(2,heart);
      a4:	67 e6       	ldi	r22, 0x67	; 103
      a6:	70 e0       	ldi	r23, 0x00	; 0
      a8:	82 e0       	ldi	r24, 0x02	; 2
      aa:	0e 94 cc 03 	call	0x798	; 0x798 <LCD_CustomerChar>
	LCD_GoTo(4,0);
      ae:	60 e0       	ldi	r22, 0x00	; 0
      b0:	84 e0       	ldi	r24, 0x04	; 4
      b2:	0e 94 3b 03 	call	0x676	; 0x676 <LCD_GoTo>
	LCD_WriteString("p1:0          p2:0");
      b6:	87 e7       	ldi	r24, 0x77	; 119
      b8:	90 e0       	ldi	r25, 0x00	; 0
      ba:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <LCD_WriteString>
      be:	08 95       	ret

000000c0 <winner_dis>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      c0:	2f ef       	ldi	r18, 0xFF	; 255
      c2:	85 ea       	ldi	r24, 0xA5	; 165
      c4:	9e e0       	ldi	r25, 0x0E	; 14
      c6:	21 50       	subi	r18, 0x01	; 1
      c8:	80 40       	sbci	r24, 0x00	; 0
      ca:	90 40       	sbci	r25, 0x00	; 0
      cc:	e1 f7       	brne	.-8      	; 0xc6 <winner_dis+0x6>
      ce:	00 c0       	rjmp	.+0      	; 0xd0 <winner_dis+0x10>
      d0:	00 00       	nop


void winner_dis(void)
{
	_delay_ms(300);
	LCD_Clear();
      d2:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <LCD_Clear>
	LCD_GoTo(1,0);
      d6:	60 e0       	ldi	r22, 0x00	; 0
      d8:	81 e0       	ldi	r24, 0x01	; 1
      da:	0e 94 3b 03 	call	0x676	; 0x676 <LCD_GoTo>
	LCD_WriteString("The winner is ......");
      de:	8a e8       	ldi	r24, 0x8A	; 138
      e0:	90 e0       	ldi	r25, 0x00	; 0
      e2:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <LCD_WriteString>
	LCD_GoTo(4,5);
      e6:	65 e0       	ldi	r22, 0x05	; 5
      e8:	84 e0       	ldi	r24, 0x04	; 4
      ea:	0e 94 3b 03 	call	0x676	; 0x676 <LCD_GoTo>
      ee:	2f ef       	ldi	r18, 0xFF	; 255
      f0:	83 ed       	ldi	r24, 0xD3	; 211
      f2:	90 e3       	ldi	r25, 0x30	; 48
      f4:	21 50       	subi	r18, 0x01	; 1
      f6:	80 40       	sbci	r24, 0x00	; 0
      f8:	90 40       	sbci	r25, 0x00	; 0
      fa:	e1 f7       	brne	.-8      	; 0xf4 <winner_dis+0x34>
      fc:	00 c0       	rjmp	.+0      	; 0xfe <winner_dis+0x3e>
      fe:	00 00       	nop
	_delay_ms(1000);
	
	if (score1>score2)
     100:	90 91 d5 00 	lds	r25, 0x00D5	; 0x8000d5 <score1>
     104:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <__data_end>
     108:	89 17       	cp	r24, r25
     10a:	c8 f4       	brcc	.+50     	; 0x13e <winner_dis+0x7e>
	{
		LCD_WriteString("Hamoksha ");
     10c:	8f e9       	ldi	r24, 0x9F	; 159
     10e:	90 e0       	ldi	r25, 0x00	; 0
     110:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <LCD_WriteString>
		LCD_WriteChar(HEART);
     114:	82 e0       	ldi	r24, 0x02	; 2
     116:	0e 94 57 03 	call	0x6ae	; 0x6ae <LCD_WriteChar>
		LCD_WriteChar(HEART);
     11a:	82 e0       	ldi	r24, 0x02	; 2
     11c:	0e 94 57 03 	call	0x6ae	; 0x6ae <LCD_WriteChar>
		LCD_WriteChar(HEART);
     120:	82 e0       	ldi	r24, 0x02	; 2
     122:	0e 94 57 03 	call	0x6ae	; 0x6ae <LCD_WriteChar>
     126:	2f ef       	ldi	r18, 0xFF	; 255
     128:	83 ed       	ldi	r24, 0xD3	; 211
     12a:	90 e3       	ldi	r25, 0x30	; 48
     12c:	21 50       	subi	r18, 0x01	; 1
     12e:	80 40       	sbci	r24, 0x00	; 0
     130:	90 40       	sbci	r25, 0x00	; 0
     132:	e1 f7       	brne	.-8      	; 0x12c <winner_dis+0x6c>
     134:	00 c0       	rjmp	.+0      	; 0x136 <winner_dis+0x76>
     136:	00 00       	nop
		_delay_ms(1000);
		LCD_Clear();
     138:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <LCD_Clear>
     13c:	08 95       	ret
	}
	
	
	else if (score2>score1)
     13e:	98 17       	cp	r25, r24
     140:	c0 f4       	brcc	.+48     	; 0x172 <winner_dis+0xb2>
	{
		LCD_WriteString("7azal2oom ");
     142:	89 ea       	ldi	r24, 0xA9	; 169
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <LCD_WriteString>
		LCD_WriteChar(HEART);
     14a:	82 e0       	ldi	r24, 0x02	; 2
     14c:	0e 94 57 03 	call	0x6ae	; 0x6ae <LCD_WriteChar>
		LCD_WriteChar(HEART);
     150:	82 e0       	ldi	r24, 0x02	; 2
     152:	0e 94 57 03 	call	0x6ae	; 0x6ae <LCD_WriteChar>
		LCD_WriteChar(HEART);
     156:	82 e0       	ldi	r24, 0x02	; 2
     158:	0e 94 57 03 	call	0x6ae	; 0x6ae <LCD_WriteChar>
     15c:	2f ef       	ldi	r18, 0xFF	; 255
     15e:	83 ed       	ldi	r24, 0xD3	; 211
     160:	90 e3       	ldi	r25, 0x30	; 48
     162:	21 50       	subi	r18, 0x01	; 1
     164:	80 40       	sbci	r24, 0x00	; 0
     166:	90 40       	sbci	r25, 0x00	; 0
     168:	e1 f7       	brne	.-8      	; 0x162 <winner_dis+0xa2>
     16a:	00 c0       	rjmp	.+0      	; 0x16c <winner_dis+0xac>
     16c:	00 00       	nop
		_delay_ms(1000);
		LCD_Clear();
     16e:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <LCD_Clear>
     172:	08 95       	ret

00000174 <reset_game>:
}


void reset_game(void)
{
	LCD_Clear();
     174:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <LCD_Clear>
	score1=0;
     178:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <score1>
	score2=0;
     17c:	10 92 d4 00 	sts	0x00D4, r1	; 0x8000d4 <__data_end>
	i=1;
     180:	81 e0       	ldi	r24, 0x01	; 1
     182:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <i>
	j=1;
     186:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <j>
	flag_direction=1;
     18a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <flag_direction>
	ch_1=1;
     18e:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <ch_1>
	ch_2=1;
     192:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <ch_2>
	LCD_GoTo(4,0);
     196:	60 e0       	ldi	r22, 0x00	; 0
     198:	84 e0       	ldi	r24, 0x04	; 4
     19a:	0e 94 3b 03 	call	0x676	; 0x676 <LCD_GoTo>
	LCD_WriteString("p1:0          p2:0");
     19e:	87 e7       	ldi	r24, 0x77	; 119
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <LCD_WriteString>
	L_Button=NOT_PRESSED;
     1a6:	84 e0       	ldi	r24, 0x04	; 4
     1a8:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <L_Button>
	R_Button=NOT_PRESSED;
     1ac:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     1b0:	08 95       	ret

000001b2 <Get_L_Button>:
}

BUTTON_STATUS_t Get_L_Button(void)
{
     1b2:	cf 93       	push	r28
	BUTTON_STATUS_t button=NOT_PRESSED;
	if(!DIO_ReadPin(PIND7))
     1b4:	8f e1       	ldi	r24, 0x1F	; 31
     1b6:	0e 94 31 05 	call	0xa62	; 0xa62 <DIO_ReadPin>
     1ba:	81 11       	cpse	r24, r1
     1bc:	0d c0       	rjmp	.+26     	; 0x1d8 <Get_L_Button+0x26>
     1be:	8f ed       	ldi	r24, 0xDF	; 223
     1c0:	9e e2       	ldi	r25, 0x2E	; 46
     1c2:	01 97       	sbiw	r24, 0x01	; 1
     1c4:	f1 f7       	brne	.-4      	; 0x1c2 <Get_L_Button+0x10>
     1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <Get_L_Button+0x16>
     1c8:	00 00       	nop
	{
		_delay_ms(3);
		while(!DIO_ReadPin(PIND7));
     1ca:	8f e1       	ldi	r24, 0x1F	; 31
     1cc:	0e 94 31 05 	call	0xa62	; 0xa62 <DIO_ReadPin>
     1d0:	88 23       	and	r24, r24
     1d2:	d9 f3       	breq	.-10     	; 0x1ca <Get_L_Button+0x18>
		button=BL_DOWN;
     1d4:	c1 e0       	ldi	r28, 0x01	; 1
     1d6:	01 c0       	rjmp	.+2      	; 0x1da <Get_L_Button+0x28>
	R_Button=NOT_PRESSED;
}

BUTTON_STATUS_t Get_L_Button(void)
{
	BUTTON_STATUS_t button=NOT_PRESSED;
     1d8:	c4 e0       	ldi	r28, 0x04	; 4
	{
		_delay_ms(3);
		while(!DIO_ReadPin(PIND7));
		button=BL_DOWN;
	}
	if(!DIO_ReadPin(PIND6))
     1da:	8e e1       	ldi	r24, 0x1E	; 30
     1dc:	0e 94 31 05 	call	0xa62	; 0xa62 <DIO_ReadPin>
     1e0:	81 11       	cpse	r24, r1
     1e2:	0c c0       	rjmp	.+24     	; 0x1fc <Get_L_Button+0x4a>
     1e4:	8f ed       	ldi	r24, 0xDF	; 223
     1e6:	9e e2       	ldi	r25, 0x2E	; 46
     1e8:	01 97       	sbiw	r24, 0x01	; 1
     1ea:	f1 f7       	brne	.-4      	; 0x1e8 <Get_L_Button+0x36>
     1ec:	00 c0       	rjmp	.+0      	; 0x1ee <Get_L_Button+0x3c>
     1ee:	00 00       	nop
	{
		_delay_ms(3);
		while(!DIO_ReadPin(PIND6));
     1f0:	8e e1       	ldi	r24, 0x1E	; 30
     1f2:	0e 94 31 05 	call	0xa62	; 0xa62 <DIO_ReadPin>
     1f6:	88 23       	and	r24, r24
     1f8:	d9 f3       	breq	.-10     	; 0x1f0 <Get_L_Button+0x3e>
		button=BL_UP;
     1fa:	c0 e0       	ldi	r28, 0x00	; 0
	}
	return button;
	
}
     1fc:	8c 2f       	mov	r24, r28
     1fe:	cf 91       	pop	r28
     200:	08 95       	ret

00000202 <Get_R_Button>:



BUTTON_STATUS_t Get_R_Button(void)
{
     202:	cf 93       	push	r28
	BUTTON_STATUS_t button=NOT_PRESSED;
	if(!DIO_ReadPin(PIND5))
     204:	8d e1       	ldi	r24, 0x1D	; 29
     206:	0e 94 31 05 	call	0xa62	; 0xa62 <DIO_ReadPin>
     20a:	81 11       	cpse	r24, r1
     20c:	0d c0       	rjmp	.+26     	; 0x228 <Get_R_Button+0x26>
     20e:	8f ed       	ldi	r24, 0xDF	; 223
     210:	9e e2       	ldi	r25, 0x2E	; 46
     212:	01 97       	sbiw	r24, 0x01	; 1
     214:	f1 f7       	brne	.-4      	; 0x212 <Get_R_Button+0x10>
     216:	00 c0       	rjmp	.+0      	; 0x218 <Get_R_Button+0x16>
     218:	00 00       	nop
	{
		_delay_ms(3);
		while(!DIO_ReadPin(PIND5));
     21a:	8d e1       	ldi	r24, 0x1D	; 29
     21c:	0e 94 31 05 	call	0xa62	; 0xa62 <DIO_ReadPin>
     220:	88 23       	and	r24, r24
     222:	d9 f3       	breq	.-10     	; 0x21a <Get_R_Button+0x18>
		button=BR_DOWN;
     224:	c3 e0       	ldi	r28, 0x03	; 3
     226:	01 c0       	rjmp	.+2      	; 0x22a <Get_R_Button+0x28>



BUTTON_STATUS_t Get_R_Button(void)
{
	BUTTON_STATUS_t button=NOT_PRESSED;
     228:	c4 e0       	ldi	r28, 0x04	; 4
	{
		_delay_ms(3);
		while(!DIO_ReadPin(PIND5));
		button=BR_DOWN;
	}
	if(!DIO_ReadPin(PIND3))
     22a:	8b e1       	ldi	r24, 0x1B	; 27
     22c:	0e 94 31 05 	call	0xa62	; 0xa62 <DIO_ReadPin>
     230:	81 11       	cpse	r24, r1
     232:	0c c0       	rjmp	.+24     	; 0x24c <Get_R_Button+0x4a>
     234:	8f ed       	ldi	r24, 0xDF	; 223
     236:	9e e2       	ldi	r25, 0x2E	; 46
     238:	01 97       	sbiw	r24, 0x01	; 1
     23a:	f1 f7       	brne	.-4      	; 0x238 <Get_R_Button+0x36>
     23c:	00 c0       	rjmp	.+0      	; 0x23e <Get_R_Button+0x3c>
     23e:	00 00       	nop
	{
		_delay_ms(3);
		while(!DIO_ReadPin(PIND3));
     240:	8b e1       	ldi	r24, 0x1B	; 27
     242:	0e 94 31 05 	call	0xa62	; 0xa62 <DIO_ReadPin>
     246:	88 23       	and	r24, r24
     248:	d9 f3       	breq	.-10     	; 0x240 <Get_R_Button+0x3e>
		button=BR_UP;
     24a:	c2 e0       	ldi	r28, 0x02	; 2
	}
	
	return button;
	
     24c:	8c 2f       	mov	r24, r28
     24e:	cf 91       	pop	r28
     250:	08 95       	ret

00000252 <Padel_Runnable>:
}


void Padel_Runnable(void)
{
	if (score1==5||score2==5)
     252:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <score1>
     256:	85 30       	cpi	r24, 0x05	; 5
     258:	21 f0       	breq	.+8      	; 0x262 <Padel_Runnable+0x10>
     25a:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <__data_end>
     25e:	85 30       	cpi	r24, 0x05	; 5
     260:	21 f4       	brne	.+8      	; 0x26a <Padel_Runnable+0x18>
	{
		winner_dis();
     262:	0e 94 60 00 	call	0xc0	; 0xc0 <winner_dis>
		
		reset_game();
     266:	0e 94 ba 00 	call	0x174	; 0x174 <reset_game>
		
	}
	/********7amoksha & 7azl2oom position ****/
	LCD_GoTo(ch_2,19);
     26a:	63 e1       	ldi	r22, 0x13	; 19
     26c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <ch_2>
     270:	0e 94 3b 03 	call	0x676	; 0x676 <LCD_GoTo>
	LCD_WriteChar(HAMOKSHA);
     274:	81 e0       	ldi	r24, 0x01	; 1
     276:	0e 94 57 03 	call	0x6ae	; 0x6ae <LCD_WriteChar>
	LCD_GoTo(ch_1,0);
     27a:	60 e0       	ldi	r22, 0x00	; 0
     27c:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <ch_1>
     280:	0e 94 3b 03 	call	0x676	; 0x676 <LCD_GoTo>
	LCD_WriteChar(HAMOKSHA);
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	0e 94 57 03 	call	0x6ae	; 0x6ae <LCD_WriteChar>
	
	L_Button=Get_L_Button();
     28a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <Get_L_Button>
     28e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <L_Button>
	R_Button=Get_R_Button();
     292:	0e 94 01 01 	call	0x202	; 0x202 <Get_R_Button>
     296:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	
	
	if (flag_direction)
     29a:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <flag_direction>
     29e:	99 23       	and	r25, r25
     2a0:	09 f4       	brne	.+2      	; 0x2a4 <Padel_Runnable+0x52>
     2a2:	77 c0       	rjmp	.+238    	; 0x392 <Padel_Runnable+0x140>
	{
		if(L_Button==BL_DOWN)
     2a4:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <L_Button>
     2a8:	91 30       	cpi	r25, 0x01	; 1
     2aa:	59 f4       	brne	.+22     	; 0x2c2 <Padel_Runnable+0x70>
		{
			j++;
     2ac:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <j>
     2b0:	9f 5f       	subi	r25, 0xFF	; 255
     2b2:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <j>
			if(j==4)
     2b6:	94 30       	cpi	r25, 0x04	; 4
     2b8:	81 f4       	brne	.+32     	; 0x2da <Padel_Runnable+0x88>
			{
				j=3;
     2ba:	93 e0       	ldi	r25, 0x03	; 3
     2bc:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <j>
     2c0:	0c c0       	rjmp	.+24     	; 0x2da <Padel_Runnable+0x88>
			}
		}
		else if(L_Button==BL_UP)
     2c2:	91 11       	cpse	r25, r1
     2c4:	0a c0       	rjmp	.+20     	; 0x2da <Padel_Runnable+0x88>
		{
			j--;
     2c6:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <j>
     2ca:	91 50       	subi	r25, 0x01	; 1
     2cc:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <j>
			if(j==0)
     2d0:	91 11       	cpse	r25, r1
     2d2:	03 c0       	rjmp	.+6      	; 0x2da <Padel_Runnable+0x88>
			{
				j=1;
     2d4:	91 e0       	ldi	r25, 0x01	; 1
     2d6:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <j>
			}
		}
		if(R_Button==BR_DOWN)
     2da:	83 30       	cpi	r24, 0x03	; 3
     2dc:	99 f4       	brne	.+38     	; 0x304 <Padel_Runnable+0xb2>
		{
			LCD_GoTo(ch_2,19);
     2de:	63 e1       	ldi	r22, 0x13	; 19
     2e0:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <ch_2>
     2e4:	0e 94 3b 03 	call	0x676	; 0x676 <LCD_GoTo>
			LCD_WriteChar(' ');
     2e8:	80 e2       	ldi	r24, 0x20	; 32
     2ea:	0e 94 57 03 	call	0x6ae	; 0x6ae <LCD_WriteChar>
			ch_2++;
     2ee:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <ch_2>
     2f2:	8f 5f       	subi	r24, 0xFF	; 255
     2f4:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <ch_2>
			
			if(ch_2==4)
     2f8:	84 30       	cpi	r24, 0x04	; 4
     2fa:	c1 f4       	brne	.+48     	; 0x32c <Padel_Runnable+0xda>
			{
				ch_2=3;
     2fc:	83 e0       	ldi	r24, 0x03	; 3
     2fe:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <ch_2>
     302:	14 c0       	rjmp	.+40     	; 0x32c <Padel_Runnable+0xda>
			}
		}
		
		else if(R_Button==BR_UP)
     304:	82 30       	cpi	r24, 0x02	; 2
     306:	91 f4       	brne	.+36     	; 0x32c <Padel_Runnable+0xda>
		{
			LCD_GoTo(ch_2,19);
     308:	63 e1       	ldi	r22, 0x13	; 19
     30a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <ch_2>
     30e:	0e 94 3b 03 	call	0x676	; 0x676 <LCD_GoTo>
			LCD_WriteChar(' ');
     312:	80 e2       	ldi	r24, 0x20	; 32
     314:	0e 94 57 03 	call	0x6ae	; 0x6ae <LCD_WriteChar>
			ch_2--;
     318:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <ch_2>
     31c:	81 50       	subi	r24, 0x01	; 1
     31e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <ch_2>
			if(ch_2==0)
     322:	81 11       	cpse	r24, r1
     324:	03 c0       	rjmp	.+6      	; 0x32c <Padel_Runnable+0xda>
			{
				ch_2=1;
     326:	81 e0       	ldi	r24, 0x01	; 1
     328:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <ch_2>
			}
		}
		i++;
     32c:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <i>
     330:	8f 5f       	subi	r24, 0xFF	; 255
     332:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <i>
		if (i==18)
     336:	82 31       	cpi	r24, 0x12	; 18
     338:	09 f0       	breq	.+2      	; 0x33c <Padel_Runnable+0xea>
     33a:	a2 c0       	rjmp	.+324    	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
		{
			flag_direction=0;
     33c:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <flag_direction>
			if(j!=ch_2)
     340:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <j>
     344:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <ch_2>
     348:	98 17       	cp	r25, r24
     34a:	09 f4       	brne	.+2      	; 0x34e <Padel_Runnable+0xfc>
     34c:	99 c0       	rjmp	.+306    	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
			{
				DIO_WritePin(PUZ,HIGH);
     34e:	61 e0       	ldi	r22, 0x01	; 1
     350:	86 e1       	ldi	r24, 0x16	; 22
     352:	0e 94 64 05 	call	0xac8	; 0xac8 <DIO_WritePin>
     356:	2f ef       	ldi	r18, 0xFF	; 255
     358:	85 ea       	ldi	r24, 0xA5	; 165
     35a:	9e e0       	ldi	r25, 0x0E	; 14
     35c:	21 50       	subi	r18, 0x01	; 1
     35e:	80 40       	sbci	r24, 0x00	; 0
     360:	90 40       	sbci	r25, 0x00	; 0
     362:	e1 f7       	brne	.-8      	; 0x35c <Padel_Runnable+0x10a>
     364:	00 c0       	rjmp	.+0      	; 0x366 <Padel_Runnable+0x114>
     366:	00 00       	nop
				_delay_ms(300);
				DIO_WritePin(PUZ,LOW);
     368:	60 e0       	ldi	r22, 0x00	; 0
     36a:	86 e1       	ldi	r24, 0x16	; 22
     36c:	0e 94 64 05 	call	0xac8	; 0xac8 <DIO_WritePin>
				score1++;
     370:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <score1>
     374:	8f 5f       	subi	r24, 0xFF	; 255
     376:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <score1>
				LCD_GoTo(4,3);
     37a:	63 e0       	ldi	r22, 0x03	; 3
     37c:	84 e0       	ldi	r24, 0x04	; 4
     37e:	0e 94 3b 03 	call	0x676	; 0x676 <LCD_GoTo>
				LCD_WriteNumber(score1);
     382:	60 91 d5 00 	lds	r22, 0x00D5	; 0x8000d5 <score1>
     386:	70 e0       	ldi	r23, 0x00	; 0
     388:	80 e0       	ldi	r24, 0x00	; 0
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	0e 94 6d 03 	call	0x6da	; 0x6da <LCD_WriteNumber>
     390:	77 c0       	rjmp	.+238    	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>

	}
	else
	{
		
		if(R_Button==BR_DOWN)
     392:	83 30       	cpi	r24, 0x03	; 3
     394:	59 f4       	brne	.+22     	; 0x3ac <Padel_Runnable+0x15a>
		{
			j++;
     396:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <j>
     39a:	8f 5f       	subi	r24, 0xFF	; 255
     39c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <j>
			if(j==4)
     3a0:	84 30       	cpi	r24, 0x04	; 4
     3a2:	81 f4       	brne	.+32     	; 0x3c4 <Padel_Runnable+0x172>
			{
				j=3;
     3a4:	83 e0       	ldi	r24, 0x03	; 3
     3a6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <j>
     3aa:	0c c0       	rjmp	.+24     	; 0x3c4 <Padel_Runnable+0x172>
			}
		}
		else if(R_Button==BR_UP)
     3ac:	82 30       	cpi	r24, 0x02	; 2
     3ae:	51 f4       	brne	.+20     	; 0x3c4 <Padel_Runnable+0x172>
		{
			j--;
     3b0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <j>
     3b4:	81 50       	subi	r24, 0x01	; 1
     3b6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <j>
			if(j==0)
     3ba:	81 11       	cpse	r24, r1
     3bc:	03 c0       	rjmp	.+6      	; 0x3c4 <Padel_Runnable+0x172>
			{
				j=1;
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <j>
			}
		}
		
		if(L_Button==BL_DOWN)
     3c4:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <L_Button>
     3c8:	81 30       	cpi	r24, 0x01	; 1
     3ca:	a1 f4       	brne	.+40     	; 0x3f4 <Padel_Runnable+0x1a2>
		{
			
			ch_1++;
     3cc:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <ch_1>
     3d0:	8f 5f       	subi	r24, 0xFF	; 255
     3d2:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <ch_1>
			if(ch_1==4)
     3d6:	84 30       	cpi	r24, 0x04	; 4
     3d8:	19 f4       	brne	.+6      	; 0x3e0 <Padel_Runnable+0x18e>
			{
				ch_1=3;
     3da:	83 e0       	ldi	r24, 0x03	; 3
     3dc:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <ch_1>
			}
			LCD_GoTo(ch_1-1,0);
     3e0:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <ch_1>
     3e4:	60 e0       	ldi	r22, 0x00	; 0
     3e6:	81 50       	subi	r24, 0x01	; 1
     3e8:	0e 94 3b 03 	call	0x676	; 0x676 <LCD_GoTo>
			LCD_WriteChar(' ');
     3ec:	80 e2       	ldi	r24, 0x20	; 32
     3ee:	0e 94 57 03 	call	0x6ae	; 0x6ae <LCD_WriteChar>
     3f2:	15 c0       	rjmp	.+42     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
		}
		
		else if(L_Button==BL_UP)
     3f4:	81 11       	cpse	r24, r1
     3f6:	13 c0       	rjmp	.+38     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
		{
			
			
			ch_1--;
     3f8:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <ch_1>
     3fc:	81 50       	subi	r24, 0x01	; 1
     3fe:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <ch_1>
			if(ch_1==0)
     402:	81 11       	cpse	r24, r1
     404:	03 c0       	rjmp	.+6      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
			{
				ch_1=1;
     406:	81 e0       	ldi	r24, 0x01	; 1
     408:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <ch_1>
			}
			LCD_GoTo(ch_1+1,0);
     40c:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <ch_1>
     410:	60 e0       	ldi	r22, 0x00	; 0
     412:	8f 5f       	subi	r24, 0xFF	; 255
     414:	0e 94 3b 03 	call	0x676	; 0x676 <LCD_GoTo>
			LCD_WriteChar(' ');
     418:	80 e2       	ldi	r24, 0x20	; 32
     41a:	0e 94 57 03 	call	0x6ae	; 0x6ae <LCD_WriteChar>
		}
		i--;
     41e:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <i>
     422:	81 50       	subi	r24, 0x01	; 1
     424:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <i>
		if (i==1)
     428:	81 30       	cpi	r24, 0x01	; 1
     42a:	51 f5       	brne	.+84     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
		{
			if(j!=ch_1)
     42c:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <j>
     430:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <ch_1>
     434:	98 17       	cp	r25, r24
     436:	09 f1       	breq	.+66     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
			{
				DIO_WritePin(PUZ,HIGH);
     438:	61 e0       	ldi	r22, 0x01	; 1
     43a:	86 e1       	ldi	r24, 0x16	; 22
     43c:	0e 94 64 05 	call	0xac8	; 0xac8 <DIO_WritePin>
     440:	2f ef       	ldi	r18, 0xFF	; 255
     442:	85 ea       	ldi	r24, 0xA5	; 165
     444:	9e e0       	ldi	r25, 0x0E	; 14
     446:	21 50       	subi	r18, 0x01	; 1
     448:	80 40       	sbci	r24, 0x00	; 0
     44a:	90 40       	sbci	r25, 0x00	; 0
     44c:	e1 f7       	brne	.-8      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
     44e:	00 c0       	rjmp	.+0      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
     450:	00 00       	nop
				_delay_ms(300);
				DIO_WritePin(PUZ,LOW);
     452:	60 e0       	ldi	r22, 0x00	; 0
     454:	86 e1       	ldi	r24, 0x16	; 22
     456:	0e 94 64 05 	call	0xac8	; 0xac8 <DIO_WritePin>
				score2++;
     45a:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <__data_end>
     45e:	8f 5f       	subi	r24, 0xFF	; 255
     460:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__data_end>
				LCD_GoTo(4,17);
     464:	61 e1       	ldi	r22, 0x11	; 17
     466:	84 e0       	ldi	r24, 0x04	; 4
     468:	0e 94 3b 03 	call	0x676	; 0x676 <LCD_GoTo>
				LCD_WriteNumber(score2);
     46c:	60 91 d4 00 	lds	r22, 0x00D4	; 0x8000d4 <__data_end>
     470:	70 e0       	ldi	r23, 0x00	; 0
     472:	80 e0       	ldi	r24, 0x00	; 0
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	0e 94 6d 03 	call	0x6da	; 0x6da <LCD_WriteNumber>
			}
			flag_direction=1;
     47a:	81 e0       	ldi	r24, 0x01	; 1
     47c:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <flag_direction>
		}
	}
	/***************ball position**************/
	LCD_GoTo(j,i);
     480:	60 91 63 00 	lds	r22, 0x0063	; 0x800063 <i>
     484:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <j>
     488:	0e 94 3b 03 	call	0x676	; 0x676 <LCD_GoTo>
	LCD_WriteChar('0');
     48c:	80 e3       	ldi	r24, 0x30	; 48
     48e:	0e 94 57 03 	call	0x6ae	; 0x6ae <LCD_WriteChar>
     492:	2f ef       	ldi	r18, 0xFF	; 255
     494:	80 e7       	ldi	r24, 0x70	; 112
     496:	92 e0       	ldi	r25, 0x02	; 2
     498:	21 50       	subi	r18, 0x01	; 1
     49a:	80 40       	sbci	r24, 0x00	; 0
     49c:	90 40       	sbci	r25, 0x00	; 0
     49e:	e1 f7       	brne	.-8      	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
     4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
     4a2:	00 00       	nop
	_delay_ms(50);
	LCD_GoTo(j,i);
     4a4:	60 91 63 00 	lds	r22, 0x0063	; 0x800063 <i>
     4a8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <j>
     4ac:	0e 94 3b 03 	call	0x676	; 0x676 <LCD_GoTo>
	LCD_WriteChar(' ');
     4b0:	80 e2       	ldi	r24, 0x20	; 32
     4b2:	0e 94 57 03 	call	0x6ae	; 0x6ae <LCD_WriteChar>
     4b6:	08 95       	ret

000004b8 <WriteIns>:
	u8 hex[16]={48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70};
	LCD_WriteChar('0');
	LCD_WriteChar('x');
	LCD_WriteChar(hex[(data>>4)]);
	LCD_WriteChar(hex[(data&0x0f)]);
}
     4b8:	cf 93       	push	r28
     4ba:	c8 2f       	mov	r28, r24
     4bc:	60 e0       	ldi	r22, 0x00	; 0
     4be:	83 e0       	ldi	r24, 0x03	; 3
     4c0:	0e 94 64 05 	call	0xac8	; 0xac8 <DIO_WritePin>
     4c4:	6c 2f       	mov	r22, r28
     4c6:	66 1f       	adc	r22, r22
     4c8:	66 27       	eor	r22, r22
     4ca:	66 1f       	adc	r22, r22
     4cc:	8c e0       	ldi	r24, 0x0C	; 12
     4ce:	0e 94 64 05 	call	0xac8	; 0xac8 <DIO_WritePin>
     4d2:	c6 fb       	bst	r28, 6
     4d4:	66 27       	eor	r22, r22
     4d6:	60 f9       	bld	r22, 0
     4d8:	8a e0       	ldi	r24, 0x0A	; 10
     4da:	0e 94 64 05 	call	0xac8	; 0xac8 <DIO_WritePin>
     4de:	c5 fb       	bst	r28, 5
     4e0:	66 27       	eor	r22, r22
     4e2:	60 f9       	bld	r22, 0
     4e4:	89 e0       	ldi	r24, 0x09	; 9
     4e6:	0e 94 64 05 	call	0xac8	; 0xac8 <DIO_WritePin>
     4ea:	c4 fb       	bst	r28, 4
     4ec:	66 27       	eor	r22, r22
     4ee:	60 f9       	bld	r22, 0
     4f0:	88 e0       	ldi	r24, 0x08	; 8
     4f2:	0e 94 64 05 	call	0xac8	; 0xac8 <DIO_WritePin>
     4f6:	61 e0       	ldi	r22, 0x01	; 1
     4f8:	82 e0       	ldi	r24, 0x02	; 2
     4fa:	0e 94 64 05 	call	0xac8	; 0xac8 <DIO_WritePin>
     4fe:	8f e9       	ldi	r24, 0x9F	; 159
     500:	9f e0       	ldi	r25, 0x0F	; 15
     502:	01 97       	sbiw	r24, 0x01	; 1
     504:	f1 f7       	brne	.-4      	; 0x502 <WriteIns+0x4a>
     506:	00 c0       	rjmp	.+0      	; 0x508 <WriteIns+0x50>
     508:	00 00       	nop
     50a:	60 e0       	ldi	r22, 0x00	; 0
     50c:	82 e0       	ldi	r24, 0x02	; 2
     50e:	0e 94 64 05 	call	0xac8	; 0xac8 <DIO_WritePin>
     512:	8f e9       	ldi	r24, 0x9F	; 159
     514:	9f e0       	ldi	r25, 0x0F	; 15
     516:	01 97       	sbiw	r24, 0x01	; 1
     518:	f1 f7       	brne	.-4      	; 0x516 <WriteIns+0x5e>
     51a:	00 c0       	rjmp	.+0      	; 0x51c <WriteIns+0x64>
     51c:	00 00       	nop
     51e:	c3 fb       	bst	r28, 3
     520:	66 27       	eor	r22, r22
     522:	60 f9       	bld	r22, 0
     524:	8c e0       	ldi	r24, 0x0C	; 12
     526:	0e 94 64 05 	call	0xac8	; 0xac8 <DIO_WritePin>
     52a:	c2 fb       	bst	r28, 2
     52c:	66 27       	eor	r22, r22
     52e:	60 f9       	bld	r22, 0
     530:	8a e0       	ldi	r24, 0x0A	; 10
     532:	0e 94 64 05 	call	0xac8	; 0xac8 <DIO_WritePin>
     536:	c1 fb       	bst	r28, 1
     538:	66 27       	eor	r22, r22
     53a:	60 f9       	bld	r22, 0
     53c:	89 e0       	ldi	r24, 0x09	; 9
     53e:	0e 94 64 05 	call	0xac8	; 0xac8 <DIO_WritePin>
     542:	6c 2f       	mov	r22, r28
     544:	61 70       	andi	r22, 0x01	; 1
     546:	88 e0       	ldi	r24, 0x08	; 8
     548:	0e 94 64 05 	call	0xac8	; 0xac8 <DIO_WritePin>
     54c:	61 e0       	ldi	r22, 0x01	; 1
     54e:	82 e0       	ldi	r24, 0x02	; 2
     550:	0e 94 64 05 	call	0xac8	; 0xac8 <DIO_WritePin>
     554:	8f e9       	ldi	r24, 0x9F	; 159
     556:	9f e0       	ldi	r25, 0x0F	; 15
     558:	01 97       	sbiw	r24, 0x01	; 1
     55a:	f1 f7       	brne	.-4      	; 0x558 <WriteIns+0xa0>
     55c:	00 c0       	rjmp	.+0      	; 0x55e <WriteIns+0xa6>
     55e:	00 00       	nop
     560:	60 e0       	ldi	r22, 0x00	; 0
     562:	82 e0       	ldi	r24, 0x02	; 2
     564:	0e 94 64 05 	call	0xac8	; 0xac8 <DIO_WritePin>
     568:	8f e9       	ldi	r24, 0x9F	; 159
     56a:	9f e0       	ldi	r25, 0x0F	; 15
     56c:	01 97       	sbiw	r24, 0x01	; 1
     56e:	f1 f7       	brne	.-4      	; 0x56c <WriteIns+0xb4>
     570:	00 c0       	rjmp	.+0      	; 0x572 <WriteIns+0xba>
     572:	00 00       	nop
     574:	cf 91       	pop	r28
     576:	08 95       	ret

00000578 <WriteData>:
     578:	cf 93       	push	r28
     57a:	c8 2f       	mov	r28, r24
     57c:	61 e0       	ldi	r22, 0x01	; 1
     57e:	83 e0       	ldi	r24, 0x03	; 3
     580:	0e 94 64 05 	call	0xac8	; 0xac8 <DIO_WritePin>
     584:	6c 2f       	mov	r22, r28
     586:	66 1f       	adc	r22, r22
     588:	66 27       	eor	r22, r22
     58a:	66 1f       	adc	r22, r22
     58c:	8c e0       	ldi	r24, 0x0C	; 12
     58e:	0e 94 64 05 	call	0xac8	; 0xac8 <DIO_WritePin>
     592:	c6 fb       	bst	r28, 6
     594:	66 27       	eor	r22, r22
     596:	60 f9       	bld	r22, 0
     598:	8a e0       	ldi	r24, 0x0A	; 10
     59a:	0e 94 64 05 	call	0xac8	; 0xac8 <DIO_WritePin>
     59e:	c5 fb       	bst	r28, 5
     5a0:	66 27       	eor	r22, r22
     5a2:	60 f9       	bld	r22, 0
     5a4:	89 e0       	ldi	r24, 0x09	; 9
     5a6:	0e 94 64 05 	call	0xac8	; 0xac8 <DIO_WritePin>
     5aa:	c4 fb       	bst	r28, 4
     5ac:	66 27       	eor	r22, r22
     5ae:	60 f9       	bld	r22, 0
     5b0:	88 e0       	ldi	r24, 0x08	; 8
     5b2:	0e 94 64 05 	call	0xac8	; 0xac8 <DIO_WritePin>
     5b6:	61 e0       	ldi	r22, 0x01	; 1
     5b8:	82 e0       	ldi	r24, 0x02	; 2
     5ba:	0e 94 64 05 	call	0xac8	; 0xac8 <DIO_WritePin>
     5be:	8f e9       	ldi	r24, 0x9F	; 159
     5c0:	9f e0       	ldi	r25, 0x0F	; 15
     5c2:	01 97       	sbiw	r24, 0x01	; 1
     5c4:	f1 f7       	brne	.-4      	; 0x5c2 <WriteData+0x4a>
     5c6:	00 c0       	rjmp	.+0      	; 0x5c8 <WriteData+0x50>
     5c8:	00 00       	nop
     5ca:	60 e0       	ldi	r22, 0x00	; 0
     5cc:	82 e0       	ldi	r24, 0x02	; 2
     5ce:	0e 94 64 05 	call	0xac8	; 0xac8 <DIO_WritePin>
     5d2:	8f e9       	ldi	r24, 0x9F	; 159
     5d4:	9f e0       	ldi	r25, 0x0F	; 15
     5d6:	01 97       	sbiw	r24, 0x01	; 1
     5d8:	f1 f7       	brne	.-4      	; 0x5d6 <WriteData+0x5e>
     5da:	00 c0       	rjmp	.+0      	; 0x5dc <WriteData+0x64>
     5dc:	00 00       	nop
     5de:	c3 fb       	bst	r28, 3
     5e0:	66 27       	eor	r22, r22
     5e2:	60 f9       	bld	r22, 0
     5e4:	8c e0       	ldi	r24, 0x0C	; 12
     5e6:	0e 94 64 05 	call	0xac8	; 0xac8 <DIO_WritePin>
     5ea:	c2 fb       	bst	r28, 2
     5ec:	66 27       	eor	r22, r22
     5ee:	60 f9       	bld	r22, 0
     5f0:	8a e0       	ldi	r24, 0x0A	; 10
     5f2:	0e 94 64 05 	call	0xac8	; 0xac8 <DIO_WritePin>
     5f6:	c1 fb       	bst	r28, 1
     5f8:	66 27       	eor	r22, r22
     5fa:	60 f9       	bld	r22, 0
     5fc:	89 e0       	ldi	r24, 0x09	; 9
     5fe:	0e 94 64 05 	call	0xac8	; 0xac8 <DIO_WritePin>
     602:	6c 2f       	mov	r22, r28
     604:	61 70       	andi	r22, 0x01	; 1
     606:	88 e0       	ldi	r24, 0x08	; 8
     608:	0e 94 64 05 	call	0xac8	; 0xac8 <DIO_WritePin>
     60c:	61 e0       	ldi	r22, 0x01	; 1
     60e:	82 e0       	ldi	r24, 0x02	; 2
     610:	0e 94 64 05 	call	0xac8	; 0xac8 <DIO_WritePin>
     614:	8f e9       	ldi	r24, 0x9F	; 159
     616:	9f e0       	ldi	r25, 0x0F	; 15
     618:	01 97       	sbiw	r24, 0x01	; 1
     61a:	f1 f7       	brne	.-4      	; 0x618 <WriteData+0xa0>
     61c:	00 c0       	rjmp	.+0      	; 0x61e <WriteData+0xa6>
     61e:	00 00       	nop
     620:	60 e0       	ldi	r22, 0x00	; 0
     622:	82 e0       	ldi	r24, 0x02	; 2
     624:	0e 94 64 05 	call	0xac8	; 0xac8 <DIO_WritePin>
     628:	8f e9       	ldi	r24, 0x9F	; 159
     62a:	9f e0       	ldi	r25, 0x0F	; 15
     62c:	01 97       	sbiw	r24, 0x01	; 1
     62e:	f1 f7       	brne	.-4      	; 0x62c <WriteData+0xb4>
     630:	00 c0       	rjmp	.+0      	; 0x632 <WriteData+0xba>
     632:	00 00       	nop
     634:	cf 91       	pop	r28
     636:	08 95       	ret

00000638 <LCD_Init>:
     638:	2f e7       	ldi	r18, 0x7F	; 127
     63a:	85 eb       	ldi	r24, 0xB5	; 181
     63c:	91 e0       	ldi	r25, 0x01	; 1
     63e:	21 50       	subi	r18, 0x01	; 1
     640:	80 40       	sbci	r24, 0x00	; 0
     642:	90 40       	sbci	r25, 0x00	; 0
     644:	e1 f7       	brne	.-8      	; 0x63e <LCD_Init+0x6>
     646:	00 c0       	rjmp	.+0      	; 0x648 <LCD_Init+0x10>
     648:	00 00       	nop
     64a:	82 e0       	ldi	r24, 0x02	; 2
     64c:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <WriteIns>
     650:	88 e2       	ldi	r24, 0x28	; 40
     652:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <WriteIns>
     656:	8c e0       	ldi	r24, 0x0C	; 12
     658:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <WriteIns>
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <WriteIns>
     662:	8f e9       	ldi	r24, 0x9F	; 159
     664:	9f e0       	ldi	r25, 0x0F	; 15
     666:	01 97       	sbiw	r24, 0x01	; 1
     668:	f1 f7       	brne	.-4      	; 0x666 <LCD_Init+0x2e>
     66a:	00 c0       	rjmp	.+0      	; 0x66c <LCD_Init+0x34>
     66c:	00 00       	nop
     66e:	86 e0       	ldi	r24, 0x06	; 6
     670:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <WriteIns>
     674:	08 95       	ret

00000676 <LCD_GoTo>:
     676:	81 30       	cpi	r24, 0x01	; 1
     678:	29 f4       	brne	.+10     	; 0x684 <LCD_GoTo+0xe>
     67a:	80 e8       	ldi	r24, 0x80	; 128
     67c:	86 0f       	add	r24, r22
     67e:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <WriteIns>
     682:	08 95       	ret
     684:	82 30       	cpi	r24, 0x02	; 2
     686:	29 f4       	brne	.+10     	; 0x692 <LCD_GoTo+0x1c>
     688:	80 ec       	ldi	r24, 0xC0	; 192
     68a:	86 0f       	add	r24, r22
     68c:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <WriteIns>
     690:	08 95       	ret
     692:	83 30       	cpi	r24, 0x03	; 3
     694:	29 f4       	brne	.+10     	; 0x6a0 <LCD_GoTo+0x2a>
     696:	84 e9       	ldi	r24, 0x94	; 148
     698:	86 0f       	add	r24, r22
     69a:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <WriteIns>
     69e:	08 95       	ret
     6a0:	84 30       	cpi	r24, 0x04	; 4
     6a2:	21 f4       	brne	.+8      	; 0x6ac <LCD_GoTo+0x36>
     6a4:	84 ed       	ldi	r24, 0xD4	; 212
     6a6:	86 0f       	add	r24, r22
     6a8:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <WriteIns>
     6ac:	08 95       	ret

000006ae <LCD_WriteChar>:
     6ae:	0e 94 bc 02 	call	0x578	; 0x578 <WriteData>
     6b2:	08 95       	ret

000006b4 <LCD_WriteString>:
     6b4:	0f 93       	push	r16
     6b6:	1f 93       	push	r17
     6b8:	cf 93       	push	r28
     6ba:	8c 01       	movw	r16, r24
     6bc:	c0 e0       	ldi	r28, 0x00	; 0
     6be:	03 c0       	rjmp	.+6      	; 0x6c6 <LCD_WriteString+0x12>
     6c0:	0e 94 bc 02 	call	0x578	; 0x578 <WriteData>
     6c4:	cf 5f       	subi	r28, 0xFF	; 255
     6c6:	f8 01       	movw	r30, r16
     6c8:	ec 0f       	add	r30, r28
     6ca:	f1 1d       	adc	r31, r1
     6cc:	80 81       	ld	r24, Z
     6ce:	81 11       	cpse	r24, r1
     6d0:	f7 cf       	rjmp	.-18     	; 0x6c0 <LCD_WriteString+0xc>
     6d2:	cf 91       	pop	r28
     6d4:	1f 91       	pop	r17
     6d6:	0f 91       	pop	r16
     6d8:	08 95       	ret

000006da <LCD_WriteNumber>:
     6da:	cf 92       	push	r12
     6dc:	df 92       	push	r13
     6de:	ef 92       	push	r14
     6e0:	ff 92       	push	r15
     6e2:	1f 93       	push	r17
     6e4:	cf 93       	push	r28
     6e6:	df 93       	push	r29
     6e8:	cd b7       	in	r28, 0x3d	; 61
     6ea:	de b7       	in	r29, 0x3e	; 62
     6ec:	2a 97       	sbiw	r28, 0x0a	; 10
     6ee:	0f b6       	in	r0, 0x3f	; 63
     6f0:	f8 94       	cli
     6f2:	de bf       	out	0x3e, r29	; 62
     6f4:	0f be       	out	0x3f, r0	; 63
     6f6:	cd bf       	out	0x3d, r28	; 61
     6f8:	6b 01       	movw	r12, r22
     6fa:	7c 01       	movw	r14, r24
     6fc:	61 15       	cp	r22, r1
     6fe:	71 05       	cpc	r23, r1
     700:	81 05       	cpc	r24, r1
     702:	91 05       	cpc	r25, r1
     704:	21 f4       	brne	.+8      	; 0x70e <LCD_WriteNumber+0x34>
     706:	80 e3       	ldi	r24, 0x30	; 48
     708:	0e 94 57 03 	call	0x6ae	; 0x6ae <LCD_WriteChar>
     70c:	0d c0       	rjmp	.+26     	; 0x728 <LCD_WriteNumber+0x4e>
     70e:	99 23       	and	r25, r25
     710:	5c f4       	brge	.+22     	; 0x728 <LCD_WriteNumber+0x4e>
     712:	8d e2       	ldi	r24, 0x2D	; 45
     714:	0e 94 57 03 	call	0x6ae	; 0x6ae <LCD_WriteChar>
     718:	f0 94       	com	r15
     71a:	e0 94       	com	r14
     71c:	d0 94       	com	r13
     71e:	c0 94       	com	r12
     720:	c1 1c       	adc	r12, r1
     722:	d1 1c       	adc	r13, r1
     724:	e1 1c       	adc	r14, r1
     726:	f1 1c       	adc	r15, r1
     728:	10 e0       	ldi	r17, 0x00	; 0
     72a:	15 c0       	rjmp	.+42     	; 0x756 <LCD_WriteNumber+0x7c>
     72c:	c7 01       	movw	r24, r14
     72e:	b6 01       	movw	r22, r12
     730:	2a e0       	ldi	r18, 0x0A	; 10
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	40 e0       	ldi	r20, 0x00	; 0
     736:	50 e0       	ldi	r21, 0x00	; 0
     738:	0e 94 f5 07 	call	0xfea	; 0xfea <__divmodsi4>
     73c:	e1 e0       	ldi	r30, 0x01	; 1
     73e:	f0 e0       	ldi	r31, 0x00	; 0
     740:	ec 0f       	add	r30, r28
     742:	fd 1f       	adc	r31, r29
     744:	e1 0f       	add	r30, r17
     746:	f1 1d       	adc	r31, r1
     748:	60 5d       	subi	r22, 0xD0	; 208
     74a:	60 83       	st	Z, r22
     74c:	c2 2e       	mov	r12, r18
     74e:	d3 2e       	mov	r13, r19
     750:	e4 2e       	mov	r14, r20
     752:	f5 2e       	mov	r15, r21
     754:	1f 5f       	subi	r17, 0xFF	; 255
     756:	1c 14       	cp	r1, r12
     758:	1d 04       	cpc	r1, r13
     75a:	1e 04       	cpc	r1, r14
     75c:	1f 04       	cpc	r1, r15
     75e:	34 f3       	brlt	.-52     	; 0x72c <LCD_WriteNumber+0x52>
     760:	11 50       	subi	r17, 0x01	; 1
     762:	0a c0       	rjmp	.+20     	; 0x778 <LCD_WriteNumber+0x9e>
     764:	e1 e0       	ldi	r30, 0x01	; 1
     766:	f0 e0       	ldi	r31, 0x00	; 0
     768:	ec 0f       	add	r30, r28
     76a:	fd 1f       	adc	r31, r29
     76c:	e1 0f       	add	r30, r17
     76e:	f1 1d       	adc	r31, r1
     770:	80 81       	ld	r24, Z
     772:	0e 94 57 03 	call	0x6ae	; 0x6ae <LCD_WriteChar>
     776:	11 50       	subi	r17, 0x01	; 1
     778:	1f 3f       	cpi	r17, 0xFF	; 255
     77a:	a1 f7       	brne	.-24     	; 0x764 <LCD_WriteNumber+0x8a>
     77c:	2a 96       	adiw	r28, 0x0a	; 10
     77e:	0f b6       	in	r0, 0x3f	; 63
     780:	f8 94       	cli
     782:	de bf       	out	0x3e, r29	; 62
     784:	0f be       	out	0x3f, r0	; 63
     786:	cd bf       	out	0x3d, r28	; 61
     788:	df 91       	pop	r29
     78a:	cf 91       	pop	r28
     78c:	1f 91       	pop	r17
     78e:	ff 90       	pop	r15
     790:	ef 90       	pop	r14
     792:	df 90       	pop	r13
     794:	cf 90       	pop	r12
     796:	08 95       	ret

00000798 <LCD_CustomerChar>:
void LCD_CustomerChar(u8 address , u8*character)
{
     798:	0f 93       	push	r16
     79a:	1f 93       	push	r17
     79c:	cf 93       	push	r28
     79e:	8b 01       	movw	r16, r22
	
	WriteIns(0x40+(address*8));
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	08 96       	adiw	r24, 0x08	; 8
     7a4:	88 0f       	add	r24, r24
     7a6:	88 0f       	add	r24, r24
     7a8:	88 0f       	add	r24, r24
     7aa:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <WriteIns>
	
	for(u8 i=0;i<8;i++)
     7ae:	c0 e0       	ldi	r28, 0x00	; 0
     7b0:	07 c0       	rjmp	.+14     	; 0x7c0 <LCD_CustomerChar+0x28>
	{
		WriteData(character[i]);
     7b2:	f8 01       	movw	r30, r16
     7b4:	ec 0f       	add	r30, r28
     7b6:	f1 1d       	adc	r31, r1
     7b8:	80 81       	ld	r24, Z
     7ba:	0e 94 bc 02 	call	0x578	; 0x578 <WriteData>
void LCD_CustomerChar(u8 address , u8*character)
{
	
	WriteIns(0x40+(address*8));
	
	for(u8 i=0;i<8;i++)
     7be:	cf 5f       	subi	r28, 0xFF	; 255
     7c0:	c8 30       	cpi	r28, 0x08	; 8
     7c2:	b8 f3       	brcs	.-18     	; 0x7b2 <LCD_CustomerChar+0x1a>
	{
		WriteData(character[i]);
	}
	WriteIns(0x80);
     7c4:	80 e8       	ldi	r24, 0x80	; 128
     7c6:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <WriteIns>
}
     7ca:	cf 91       	pop	r28
     7cc:	1f 91       	pop	r17
     7ce:	0f 91       	pop	r16
     7d0:	08 95       	ret

000007d2 <LCD_Clear>:

void LCD_Clear()
{
	WriteIns(0x01);
     7d2:	81 e0       	ldi	r24, 0x01	; 1
     7d4:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <WriteIns>
     7d8:	8f e3       	ldi	r24, 0x3F	; 63
     7da:	9f e1       	ldi	r25, 0x1F	; 31
     7dc:	01 97       	sbiw	r24, 0x01	; 1
     7de:	f1 f7       	brne	.-4      	; 0x7dc <LCD_Clear+0xa>
     7e0:	00 c0       	rjmp	.+0      	; 0x7e2 <LCD_Clear+0x10>
     7e2:	00 00       	nop
	_delay_ms(2);
	WriteIns(0x80);
     7e4:	80 e8       	ldi	r24, 0x80	; 128
     7e6:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <WriteIns>
     7ea:	08 95       	ret

000007ec <main>:


int main(void)
{
	
	Padel_Init();
     7ec:	0e 94 49 00 	call	0x92	; 0x92 <Padel_Init>
	while (1)
	{
		Padel_Runnable();
     7f0:	0e 94 29 01 	call	0x252	; 0x252 <Padel_Runnable>
     7f4:	fd cf       	rjmp	.-6      	; 0x7f0 <main+0x4>

000007f6 <__vector_16>:
{
	ADC_voidStartConversion(ch);
}

ISR(ADC_vect)
{
     7f6:	1f 92       	push	r1
     7f8:	0f 92       	push	r0
     7fa:	0f b6       	in	r0, 0x3f	; 63
     7fc:	0f 92       	push	r0
     7fe:	11 24       	eor	r1, r1
     800:	2f 93       	push	r18
     802:	3f 93       	push	r19
     804:	4f 93       	push	r20
     806:	5f 93       	push	r21
     808:	6f 93       	push	r22
     80a:	7f 93       	push	r23
     80c:	8f 93       	push	r24
     80e:	9f 93       	push	r25
     810:	af 93       	push	r26
     812:	bf 93       	push	r27
     814:	ef 93       	push	r30
     816:	ff 93       	push	r31
	if (Adc_Fptr!=NULL_PTR)
     818:	e0 91 d6 00 	lds	r30, 0x00D6	; 0x8000d6 <Adc_Fptr>
     81c:	f0 91 d7 00 	lds	r31, 0x00D7	; 0x8000d7 <Adc_Fptr+0x1>
     820:	30 97       	sbiw	r30, 0x00	; 0
     822:	09 f0       	breq	.+2      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
	{
		Adc_Fptr();
     824:	09 95       	icall
	}
	
}
     826:	ff 91       	pop	r31
     828:	ef 91       	pop	r30
     82a:	bf 91       	pop	r27
     82c:	af 91       	pop	r26
     82e:	9f 91       	pop	r25
     830:	8f 91       	pop	r24
     832:	7f 91       	pop	r23
     834:	6f 91       	pop	r22
     836:	5f 91       	pop	r21
     838:	4f 91       	pop	r20
     83a:	3f 91       	pop	r19
     83c:	2f 91       	pop	r18
     83e:	0f 90       	pop	r0
     840:	0f be       	out	0x3f, r0	; 63
     842:	0f 90       	pop	r0
     844:	1f 90       	pop	r1
     846:	18 95       	reti

00000848 <DIO_InitPin>:
	}
}

void DIO_InitPin(DIO_Pin_type pin ,DIO_PinStatus_type status)
{
	u8 pin_num = pin%8;
     848:	98 2f       	mov	r25, r24
     84a:	97 70       	andi	r25, 0x07	; 7
	DIO_Port_type port =pin/8;
     84c:	86 95       	lsr	r24
     84e:	86 95       	lsr	r24
     850:	86 95       	lsr	r24
	switch(status)
     852:	61 30       	cpi	r22, 0x01	; 1
     854:	09 f4       	brne	.+2      	; 0x858 <DIO_InitPin+0x10>
     856:	55 c0       	rjmp	.+170    	; 0x902 <__stack+0xa3>
     858:	20 f0       	brcs	.+8      	; 0x862 <__stack+0x3>
     85a:	62 30       	cpi	r22, 0x02	; 2
     85c:	09 f4       	brne	.+2      	; 0x860 <__stack+0x1>
     85e:	a1 c0       	rjmp	.+322    	; 0x9a2 <__stack+0x143>
     860:	08 95       	ret
	{
		case OUTPUT:
		switch(port)
     862:	81 30       	cpi	r24, 0x01	; 1
     864:	c1 f0       	breq	.+48     	; 0x896 <__stack+0x37>
     866:	28 f0       	brcs	.+10     	; 0x872 <__stack+0x13>
     868:	82 30       	cpi	r24, 0x02	; 2
     86a:	39 f1       	breq	.+78     	; 0x8ba <__stack+0x5b>
     86c:	83 30       	cpi	r24, 0x03	; 3
     86e:	b9 f1       	breq	.+110    	; 0x8de <__stack+0x7f>
     870:	08 95       	ret
		{
			case PA:
			SET_BIT(DDRA,pin_num);
     872:	4a b3       	in	r20, 0x1a	; 26
     874:	21 e0       	ldi	r18, 0x01	; 1
     876:	30 e0       	ldi	r19, 0x00	; 0
     878:	b9 01       	movw	r22, r18
     87a:	02 c0       	rjmp	.+4      	; 0x880 <__stack+0x21>
     87c:	66 0f       	add	r22, r22
     87e:	77 1f       	adc	r23, r23
     880:	9a 95       	dec	r25
     882:	e2 f7       	brpl	.-8      	; 0x87c <__stack+0x1d>
     884:	cb 01       	movw	r24, r22
     886:	94 2f       	mov	r25, r20
     888:	98 2b       	or	r25, r24
     88a:	9a bb       	out	0x1a, r25	; 26
			CLR_BIT(PORTA,pin_num);
     88c:	9b b3       	in	r25, 0x1b	; 27
     88e:	80 95       	com	r24
     890:	89 23       	and	r24, r25
     892:	8b bb       	out	0x1b, r24	; 27
			break;
     894:	08 95       	ret
			case PB:
			SET_BIT(DDRB,pin_num);
     896:	47 b3       	in	r20, 0x17	; 23
     898:	21 e0       	ldi	r18, 0x01	; 1
     89a:	30 e0       	ldi	r19, 0x00	; 0
     89c:	b9 01       	movw	r22, r18
     89e:	02 c0       	rjmp	.+4      	; 0x8a4 <__stack+0x45>
     8a0:	66 0f       	add	r22, r22
     8a2:	77 1f       	adc	r23, r23
     8a4:	9a 95       	dec	r25
     8a6:	e2 f7       	brpl	.-8      	; 0x8a0 <__stack+0x41>
     8a8:	cb 01       	movw	r24, r22
     8aa:	94 2f       	mov	r25, r20
     8ac:	98 2b       	or	r25, r24
     8ae:	97 bb       	out	0x17, r25	; 23
			CLR_BIT(PORTB,pin_num);
     8b0:	98 b3       	in	r25, 0x18	; 24
     8b2:	80 95       	com	r24
     8b4:	89 23       	and	r24, r25
     8b6:	88 bb       	out	0x18, r24	; 24
			break;
     8b8:	08 95       	ret
			case PC:
			SET_BIT(DDRC,pin_num);
     8ba:	44 b3       	in	r20, 0x14	; 20
     8bc:	21 e0       	ldi	r18, 0x01	; 1
     8be:	30 e0       	ldi	r19, 0x00	; 0
     8c0:	b9 01       	movw	r22, r18
     8c2:	02 c0       	rjmp	.+4      	; 0x8c8 <__stack+0x69>
     8c4:	66 0f       	add	r22, r22
     8c6:	77 1f       	adc	r23, r23
     8c8:	9a 95       	dec	r25
     8ca:	e2 f7       	brpl	.-8      	; 0x8c4 <__stack+0x65>
     8cc:	cb 01       	movw	r24, r22
     8ce:	94 2f       	mov	r25, r20
     8d0:	98 2b       	or	r25, r24
     8d2:	94 bb       	out	0x14, r25	; 20
			CLR_BIT(PORTC,pin_num);
     8d4:	95 b3       	in	r25, 0x15	; 21
     8d6:	80 95       	com	r24
     8d8:	89 23       	and	r24, r25
     8da:	85 bb       	out	0x15, r24	; 21
			break;
     8dc:	08 95       	ret
			case PD:
			SET_BIT(DDRD,pin_num);
     8de:	41 b3       	in	r20, 0x11	; 17
     8e0:	21 e0       	ldi	r18, 0x01	; 1
     8e2:	30 e0       	ldi	r19, 0x00	; 0
     8e4:	b9 01       	movw	r22, r18
     8e6:	02 c0       	rjmp	.+4      	; 0x8ec <__stack+0x8d>
     8e8:	66 0f       	add	r22, r22
     8ea:	77 1f       	adc	r23, r23
     8ec:	9a 95       	dec	r25
     8ee:	e2 f7       	brpl	.-8      	; 0x8e8 <__stack+0x89>
     8f0:	cb 01       	movw	r24, r22
     8f2:	94 2f       	mov	r25, r20
     8f4:	98 2b       	or	r25, r24
     8f6:	91 bb       	out	0x11, r25	; 17
			CLR_BIT(PORTD,pin_num);
     8f8:	92 b3       	in	r25, 0x12	; 18
     8fa:	80 95       	com	r24
     8fc:	89 23       	and	r24, r25
     8fe:	82 bb       	out	0x12, r24	; 18
			break;
     900:	08 95       	ret
			
		}
		break;
		case INFREE:
		switch(port)
     902:	81 30       	cpi	r24, 0x01	; 1
     904:	c1 f0       	breq	.+48     	; 0x936 <__stack+0xd7>
     906:	28 f0       	brcs	.+10     	; 0x912 <__stack+0xb3>
     908:	82 30       	cpi	r24, 0x02	; 2
     90a:	39 f1       	breq	.+78     	; 0x95a <__stack+0xfb>
     90c:	83 30       	cpi	r24, 0x03	; 3
     90e:	b9 f1       	breq	.+110    	; 0x97e <__stack+0x11f>
     910:	08 95       	ret
		{
			case PA:
			CLR_BIT(DDRA,pin_num);
     912:	4a b3       	in	r20, 0x1a	; 26
     914:	21 e0       	ldi	r18, 0x01	; 1
     916:	30 e0       	ldi	r19, 0x00	; 0
     918:	b9 01       	movw	r22, r18
     91a:	02 c0       	rjmp	.+4      	; 0x920 <__stack+0xc1>
     91c:	66 0f       	add	r22, r22
     91e:	77 1f       	adc	r23, r23
     920:	9a 95       	dec	r25
     922:	e2 f7       	brpl	.-8      	; 0x91c <__stack+0xbd>
     924:	cb 01       	movw	r24, r22
     926:	80 95       	com	r24
     928:	94 2f       	mov	r25, r20
     92a:	98 23       	and	r25, r24
     92c:	9a bb       	out	0x1a, r25	; 26
			CLR_BIT(PORTA,pin_num);
     92e:	9b b3       	in	r25, 0x1b	; 27
     930:	89 23       	and	r24, r25
     932:	8b bb       	out	0x1b, r24	; 27
			break;
     934:	08 95       	ret
			case PB:
			CLR_BIT(DDRB,pin_num);
     936:	47 b3       	in	r20, 0x17	; 23
     938:	21 e0       	ldi	r18, 0x01	; 1
     93a:	30 e0       	ldi	r19, 0x00	; 0
     93c:	b9 01       	movw	r22, r18
     93e:	02 c0       	rjmp	.+4      	; 0x944 <__stack+0xe5>
     940:	66 0f       	add	r22, r22
     942:	77 1f       	adc	r23, r23
     944:	9a 95       	dec	r25
     946:	e2 f7       	brpl	.-8      	; 0x940 <__stack+0xe1>
     948:	cb 01       	movw	r24, r22
     94a:	80 95       	com	r24
     94c:	94 2f       	mov	r25, r20
     94e:	98 23       	and	r25, r24
     950:	97 bb       	out	0x17, r25	; 23
			CLR_BIT(PORTB,pin_num);
     952:	98 b3       	in	r25, 0x18	; 24
     954:	89 23       	and	r24, r25
     956:	88 bb       	out	0x18, r24	; 24
			break;
     958:	08 95       	ret
			case PC:
			CLR_BIT(DDRC,pin_num);
     95a:	44 b3       	in	r20, 0x14	; 20
     95c:	21 e0       	ldi	r18, 0x01	; 1
     95e:	30 e0       	ldi	r19, 0x00	; 0
     960:	b9 01       	movw	r22, r18
     962:	02 c0       	rjmp	.+4      	; 0x968 <__stack+0x109>
     964:	66 0f       	add	r22, r22
     966:	77 1f       	adc	r23, r23
     968:	9a 95       	dec	r25
     96a:	e2 f7       	brpl	.-8      	; 0x964 <__stack+0x105>
     96c:	cb 01       	movw	r24, r22
     96e:	80 95       	com	r24
     970:	94 2f       	mov	r25, r20
     972:	98 23       	and	r25, r24
     974:	94 bb       	out	0x14, r25	; 20
			CLR_BIT(PORTC,pin_num);
     976:	95 b3       	in	r25, 0x15	; 21
     978:	89 23       	and	r24, r25
     97a:	85 bb       	out	0x15, r24	; 21
			break;
     97c:	08 95       	ret
			case PD:
			CLR_BIT(DDRD,pin_num);
     97e:	41 b3       	in	r20, 0x11	; 17
     980:	21 e0       	ldi	r18, 0x01	; 1
     982:	30 e0       	ldi	r19, 0x00	; 0
     984:	b9 01       	movw	r22, r18
     986:	02 c0       	rjmp	.+4      	; 0x98c <__stack+0x12d>
     988:	66 0f       	add	r22, r22
     98a:	77 1f       	adc	r23, r23
     98c:	9a 95       	dec	r25
     98e:	e2 f7       	brpl	.-8      	; 0x988 <__stack+0x129>
     990:	cb 01       	movw	r24, r22
     992:	80 95       	com	r24
     994:	94 2f       	mov	r25, r20
     996:	98 23       	and	r25, r24
     998:	91 bb       	out	0x11, r25	; 17
			CLR_BIT(PORTD,pin_num);
     99a:	92 b3       	in	r25, 0x12	; 18
     99c:	89 23       	and	r24, r25
     99e:	82 bb       	out	0x12, r24	; 18
			break;
     9a0:	08 95       	ret
			
		}
		break;
		case INPULL:
		switch(port)
     9a2:	81 30       	cpi	r24, 0x01	; 1
     9a4:	c1 f0       	breq	.+48     	; 0x9d6 <__stack+0x177>
     9a6:	28 f0       	brcs	.+10     	; 0x9b2 <__stack+0x153>
     9a8:	82 30       	cpi	r24, 0x02	; 2
     9aa:	39 f1       	breq	.+78     	; 0x9fa <__stack+0x19b>
     9ac:	83 30       	cpi	r24, 0x03	; 3
     9ae:	b9 f1       	breq	.+110    	; 0xa1e <__stack+0x1bf>
     9b0:	08 95       	ret
		{
			case PA:
			CLR_BIT(DDRA,pin_num);
     9b2:	4a b3       	in	r20, 0x1a	; 26
     9b4:	21 e0       	ldi	r18, 0x01	; 1
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	b9 01       	movw	r22, r18
     9ba:	02 c0       	rjmp	.+4      	; 0x9c0 <__stack+0x161>
     9bc:	66 0f       	add	r22, r22
     9be:	77 1f       	adc	r23, r23
     9c0:	9a 95       	dec	r25
     9c2:	e2 f7       	brpl	.-8      	; 0x9bc <__stack+0x15d>
     9c4:	cb 01       	movw	r24, r22
     9c6:	96 2f       	mov	r25, r22
     9c8:	90 95       	com	r25
     9ca:	94 23       	and	r25, r20
     9cc:	9a bb       	out	0x1a, r25	; 26
			SET_BIT(PORTA,pin_num);
     9ce:	9b b3       	in	r25, 0x1b	; 27
     9d0:	89 2b       	or	r24, r25
     9d2:	8b bb       	out	0x1b, r24	; 27
			break;
     9d4:	08 95       	ret
			case PB:
			CLR_BIT(DDRB,pin_num);
     9d6:	47 b3       	in	r20, 0x17	; 23
     9d8:	21 e0       	ldi	r18, 0x01	; 1
     9da:	30 e0       	ldi	r19, 0x00	; 0
     9dc:	b9 01       	movw	r22, r18
     9de:	02 c0       	rjmp	.+4      	; 0x9e4 <__stack+0x185>
     9e0:	66 0f       	add	r22, r22
     9e2:	77 1f       	adc	r23, r23
     9e4:	9a 95       	dec	r25
     9e6:	e2 f7       	brpl	.-8      	; 0x9e0 <__stack+0x181>
     9e8:	cb 01       	movw	r24, r22
     9ea:	96 2f       	mov	r25, r22
     9ec:	90 95       	com	r25
     9ee:	94 23       	and	r25, r20
     9f0:	97 bb       	out	0x17, r25	; 23
			SET_BIT(PORTB,pin_num);
     9f2:	98 b3       	in	r25, 0x18	; 24
     9f4:	89 2b       	or	r24, r25
     9f6:	88 bb       	out	0x18, r24	; 24
			break;
     9f8:	08 95       	ret
			case PC:
			CLR_BIT(DDRC,pin_num);
     9fa:	44 b3       	in	r20, 0x14	; 20
     9fc:	21 e0       	ldi	r18, 0x01	; 1
     9fe:	30 e0       	ldi	r19, 0x00	; 0
     a00:	b9 01       	movw	r22, r18
     a02:	02 c0       	rjmp	.+4      	; 0xa08 <__stack+0x1a9>
     a04:	66 0f       	add	r22, r22
     a06:	77 1f       	adc	r23, r23
     a08:	9a 95       	dec	r25
     a0a:	e2 f7       	brpl	.-8      	; 0xa04 <__stack+0x1a5>
     a0c:	cb 01       	movw	r24, r22
     a0e:	96 2f       	mov	r25, r22
     a10:	90 95       	com	r25
     a12:	94 23       	and	r25, r20
     a14:	94 bb       	out	0x14, r25	; 20
			SET_BIT(PORTC,pin_num);
     a16:	95 b3       	in	r25, 0x15	; 21
     a18:	89 2b       	or	r24, r25
     a1a:	85 bb       	out	0x15, r24	; 21
			break;
     a1c:	08 95       	ret
			case PD:
			CLR_BIT(DDRD,pin_num);
     a1e:	41 b3       	in	r20, 0x11	; 17
     a20:	21 e0       	ldi	r18, 0x01	; 1
     a22:	30 e0       	ldi	r19, 0x00	; 0
     a24:	b9 01       	movw	r22, r18
     a26:	02 c0       	rjmp	.+4      	; 0xa2c <__stack+0x1cd>
     a28:	66 0f       	add	r22, r22
     a2a:	77 1f       	adc	r23, r23
     a2c:	9a 95       	dec	r25
     a2e:	e2 f7       	brpl	.-8      	; 0xa28 <__stack+0x1c9>
     a30:	cb 01       	movw	r24, r22
     a32:	96 2f       	mov	r25, r22
     a34:	90 95       	com	r25
     a36:	94 23       	and	r25, r20
     a38:	91 bb       	out	0x11, r25	; 17
			SET_BIT(PORTD,pin_num);
     a3a:	92 b3       	in	r25, 0x12	; 18
     a3c:	89 2b       	or	r24, r25
     a3e:	82 bb       	out	0x12, r24	; 18
     a40:	08 95       	ret

00000a42 <DIO_Init>:




void DIO_Init(void)
{
     a42:	cf 93       	push	r28
	DIO_Pin_type i;
	for (i=PINA0;i<TOTAL_PINS;i++)
     a44:	c0 e0       	ldi	r28, 0x00	; 0
     a46:	09 c0       	rjmp	.+18     	; 0xa5a <DIO_Init+0x18>
	{
		DIO_InitPin(i,DIO_PinsStatusArr[i]);
     a48:	ec 2f       	mov	r30, r28
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	ec 54       	subi	r30, 0x4C	; 76
     a4e:	ff 4f       	sbci	r31, 0xFF	; 255
     a50:	60 81       	ld	r22, Z
     a52:	8c 2f       	mov	r24, r28
     a54:	0e 94 24 04 	call	0x848	; 0x848 <DIO_InitPin>


void DIO_Init(void)
{
	DIO_Pin_type i;
	for (i=PINA0;i<TOTAL_PINS;i++)
     a58:	cf 5f       	subi	r28, 0xFF	; 255
     a5a:	c0 32       	cpi	r28, 0x20	; 32
     a5c:	a8 f3       	brcs	.-22     	; 0xa48 <DIO_Init+0x6>
	{
		DIO_InitPin(i,DIO_PinsStatusArr[i]);
	}
}
     a5e:	cf 91       	pop	r28
     a60:	08 95       	ret

00000a62 <DIO_ReadPin>:
	}
}
DIO_PinVoltage_type DIO_ReadPin (DIO_Pin_type pin)
{
	DIO_PinVoltage_type volt=LOW;
	u8 pin_num =pin%8;
     a62:	28 2f       	mov	r18, r24
     a64:	27 70       	andi	r18, 0x07	; 7
	DIO_Port_type port =pin/8;
     a66:	86 95       	lsr	r24
     a68:	86 95       	lsr	r24
     a6a:	86 95       	lsr	r24
	switch(port)
     a6c:	81 30       	cpi	r24, 0x01	; 1
     a6e:	79 f0       	breq	.+30     	; 0xa8e <DIO_ReadPin+0x2c>
     a70:	28 f0       	brcs	.+10     	; 0xa7c <DIO_ReadPin+0x1a>
     a72:	82 30       	cpi	r24, 0x02	; 2
     a74:	a9 f0       	breq	.+42     	; 0xaa0 <DIO_ReadPin+0x3e>
     a76:	83 30       	cpi	r24, 0x03	; 3
     a78:	e1 f0       	breq	.+56     	; 0xab2 <DIO_ReadPin+0x50>
     a7a:	24 c0       	rjmp	.+72     	; 0xac4 <DIO_ReadPin+0x62>
	{
		case PA:
		volt=READ_BIT(PINA,pin_num);
     a7c:	89 b3       	in	r24, 0x19	; 25
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	02 c0       	rjmp	.+4      	; 0xa86 <DIO_ReadPin+0x24>
     a82:	95 95       	asr	r25
     a84:	87 95       	ror	r24
     a86:	2a 95       	dec	r18
     a88:	e2 f7       	brpl	.-8      	; 0xa82 <DIO_ReadPin+0x20>
     a8a:	81 70       	andi	r24, 0x01	; 1
		break;
     a8c:	08 95       	ret
		case PB:
		volt=READ_BIT(PINB,pin_num);
     a8e:	86 b3       	in	r24, 0x16	; 22
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	02 c0       	rjmp	.+4      	; 0xa98 <DIO_ReadPin+0x36>
     a94:	95 95       	asr	r25
     a96:	87 95       	ror	r24
     a98:	2a 95       	dec	r18
     a9a:	e2 f7       	brpl	.-8      	; 0xa94 <DIO_ReadPin+0x32>
     a9c:	81 70       	andi	r24, 0x01	; 1
		break;
     a9e:	08 95       	ret
		case PC:
		volt=READ_BIT(PINC,pin_num);
     aa0:	83 b3       	in	r24, 0x13	; 19
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	02 c0       	rjmp	.+4      	; 0xaaa <DIO_ReadPin+0x48>
     aa6:	95 95       	asr	r25
     aa8:	87 95       	ror	r24
     aaa:	2a 95       	dec	r18
     aac:	e2 f7       	brpl	.-8      	; 0xaa6 <DIO_ReadPin+0x44>
     aae:	81 70       	andi	r24, 0x01	; 1
		break;
     ab0:	08 95       	ret
		case PD:
		volt=READ_BIT(PIND,pin_num);
     ab2:	80 b3       	in	r24, 0x10	; 16
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	02 c0       	rjmp	.+4      	; 0xabc <DIO_ReadPin+0x5a>
     ab8:	95 95       	asr	r25
     aba:	87 95       	ror	r24
     abc:	2a 95       	dec	r18
     abe:	e2 f7       	brpl	.-8      	; 0xab8 <DIO_ReadPin+0x56>
     ac0:	81 70       	andi	r24, 0x01	; 1
		break;
     ac2:	08 95       	ret
		
	}
}
DIO_PinVoltage_type DIO_ReadPin (DIO_Pin_type pin)
{
	DIO_PinVoltage_type volt=LOW;
     ac4:	80 e0       	ldi	r24, 0x00	; 0
		volt=READ_BIT(PIND,pin_num);
		break;
		
	}
	return volt;
}
     ac6:	08 95       	ret

00000ac8 <DIO_WritePin>:
void DIO_WritePin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
{
	u8 pin_num =pin%8;
     ac8:	98 2f       	mov	r25, r24
     aca:	97 70       	andi	r25, 0x07	; 7
	DIO_Port_type port =pin/8;
     acc:	86 95       	lsr	r24
     ace:	86 95       	lsr	r24
     ad0:	86 95       	lsr	r24
	if (volt==HIGH)
     ad2:	61 30       	cpi	r22, 0x01	; 1
     ad4:	e1 f5       	brne	.+120    	; 0xb4e <DIO_WritePin+0x86>
	{
		switch(port)
     ad6:	81 30       	cpi	r24, 0x01	; 1
     ad8:	99 f0       	breq	.+38     	; 0xb00 <DIO_WritePin+0x38>
     ada:	28 f0       	brcs	.+10     	; 0xae6 <DIO_WritePin+0x1e>
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	e9 f0       	breq	.+58     	; 0xb1a <DIO_WritePin+0x52>
     ae0:	83 30       	cpi	r24, 0x03	; 3
     ae2:	41 f1       	breq	.+80     	; 0xb34 <DIO_WritePin+0x6c>
     ae4:	08 95       	ret
		{
			case PA:
			SET_BIT(PORTA,pin_num);
     ae6:	4b b3       	in	r20, 0x1b	; 27
     ae8:	21 e0       	ldi	r18, 0x01	; 1
     aea:	30 e0       	ldi	r19, 0x00	; 0
     aec:	b9 01       	movw	r22, r18
     aee:	02 c0       	rjmp	.+4      	; 0xaf4 <DIO_WritePin+0x2c>
     af0:	66 0f       	add	r22, r22
     af2:	77 1f       	adc	r23, r23
     af4:	9a 95       	dec	r25
     af6:	e2 f7       	brpl	.-8      	; 0xaf0 <DIO_WritePin+0x28>
     af8:	cb 01       	movw	r24, r22
     afa:	84 2b       	or	r24, r20
     afc:	8b bb       	out	0x1b, r24	; 27
			break;
     afe:	08 95       	ret
			case PB:
			SET_BIT(PORTB,pin_num);
     b00:	48 b3       	in	r20, 0x18	; 24
     b02:	21 e0       	ldi	r18, 0x01	; 1
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	b9 01       	movw	r22, r18
     b08:	02 c0       	rjmp	.+4      	; 0xb0e <DIO_WritePin+0x46>
     b0a:	66 0f       	add	r22, r22
     b0c:	77 1f       	adc	r23, r23
     b0e:	9a 95       	dec	r25
     b10:	e2 f7       	brpl	.-8      	; 0xb0a <DIO_WritePin+0x42>
     b12:	cb 01       	movw	r24, r22
     b14:	84 2b       	or	r24, r20
     b16:	88 bb       	out	0x18, r24	; 24
			break;
     b18:	08 95       	ret
			case PC:
			SET_BIT(PORTC,pin_num);
     b1a:	45 b3       	in	r20, 0x15	; 21
     b1c:	21 e0       	ldi	r18, 0x01	; 1
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	b9 01       	movw	r22, r18
     b22:	02 c0       	rjmp	.+4      	; 0xb28 <DIO_WritePin+0x60>
     b24:	66 0f       	add	r22, r22
     b26:	77 1f       	adc	r23, r23
     b28:	9a 95       	dec	r25
     b2a:	e2 f7       	brpl	.-8      	; 0xb24 <DIO_WritePin+0x5c>
     b2c:	cb 01       	movw	r24, r22
     b2e:	84 2b       	or	r24, r20
     b30:	85 bb       	out	0x15, r24	; 21
			break;
     b32:	08 95       	ret
			case PD:
			SET_BIT(PORTD,pin_num);
     b34:	42 b3       	in	r20, 0x12	; 18
     b36:	21 e0       	ldi	r18, 0x01	; 1
     b38:	30 e0       	ldi	r19, 0x00	; 0
     b3a:	b9 01       	movw	r22, r18
     b3c:	02 c0       	rjmp	.+4      	; 0xb42 <DIO_WritePin+0x7a>
     b3e:	66 0f       	add	r22, r22
     b40:	77 1f       	adc	r23, r23
     b42:	9a 95       	dec	r25
     b44:	e2 f7       	brpl	.-8      	; 0xb3e <DIO_WritePin+0x76>
     b46:	cb 01       	movw	r24, r22
     b48:	84 2b       	or	r24, r20
     b4a:	82 bb       	out	0x12, r24	; 18
			break;
     b4c:	08 95       	ret
			
		}
	}
	else
	{
		switch(port)
     b4e:	81 30       	cpi	r24, 0x01	; 1
     b50:	a1 f0       	breq	.+40     	; 0xb7a <DIO_WritePin+0xb2>
     b52:	28 f0       	brcs	.+10     	; 0xb5e <DIO_WritePin+0x96>
     b54:	82 30       	cpi	r24, 0x02	; 2
     b56:	f9 f0       	breq	.+62     	; 0xb96 <DIO_WritePin+0xce>
     b58:	83 30       	cpi	r24, 0x03	; 3
     b5a:	59 f1       	breq	.+86     	; 0xbb2 <DIO_WritePin+0xea>
     b5c:	08 95       	ret
		{
			case PA:
			CLR_BIT(PORTA,pin_num);
     b5e:	4b b3       	in	r20, 0x1b	; 27
     b60:	21 e0       	ldi	r18, 0x01	; 1
     b62:	30 e0       	ldi	r19, 0x00	; 0
     b64:	b9 01       	movw	r22, r18
     b66:	02 c0       	rjmp	.+4      	; 0xb6c <DIO_WritePin+0xa4>
     b68:	66 0f       	add	r22, r22
     b6a:	77 1f       	adc	r23, r23
     b6c:	9a 95       	dec	r25
     b6e:	e2 f7       	brpl	.-8      	; 0xb68 <DIO_WritePin+0xa0>
     b70:	cb 01       	movw	r24, r22
     b72:	80 95       	com	r24
     b74:	84 23       	and	r24, r20
     b76:	8b bb       	out	0x1b, r24	; 27
			break;
     b78:	08 95       	ret
			case PB:
			CLR_BIT(PORTB,pin_num);
     b7a:	48 b3       	in	r20, 0x18	; 24
     b7c:	21 e0       	ldi	r18, 0x01	; 1
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	b9 01       	movw	r22, r18
     b82:	02 c0       	rjmp	.+4      	; 0xb88 <DIO_WritePin+0xc0>
     b84:	66 0f       	add	r22, r22
     b86:	77 1f       	adc	r23, r23
     b88:	9a 95       	dec	r25
     b8a:	e2 f7       	brpl	.-8      	; 0xb84 <DIO_WritePin+0xbc>
     b8c:	cb 01       	movw	r24, r22
     b8e:	80 95       	com	r24
     b90:	84 23       	and	r24, r20
     b92:	88 bb       	out	0x18, r24	; 24
			break;
     b94:	08 95       	ret
			case PC:
			CLR_BIT(PORTC,pin_num);
     b96:	45 b3       	in	r20, 0x15	; 21
     b98:	21 e0       	ldi	r18, 0x01	; 1
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	b9 01       	movw	r22, r18
     b9e:	02 c0       	rjmp	.+4      	; 0xba4 <DIO_WritePin+0xdc>
     ba0:	66 0f       	add	r22, r22
     ba2:	77 1f       	adc	r23, r23
     ba4:	9a 95       	dec	r25
     ba6:	e2 f7       	brpl	.-8      	; 0xba0 <DIO_WritePin+0xd8>
     ba8:	cb 01       	movw	r24, r22
     baa:	80 95       	com	r24
     bac:	84 23       	and	r24, r20
     bae:	85 bb       	out	0x15, r24	; 21
			break;
     bb0:	08 95       	ret
			case PD:
			CLR_BIT(PORTD,pin_num);
     bb2:	42 b3       	in	r20, 0x12	; 18
     bb4:	21 e0       	ldi	r18, 0x01	; 1
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	b9 01       	movw	r22, r18
     bba:	02 c0       	rjmp	.+4      	; 0xbc0 <DIO_WritePin+0xf8>
     bbc:	66 0f       	add	r22, r22
     bbe:	77 1f       	adc	r23, r23
     bc0:	9a 95       	dec	r25
     bc2:	e2 f7       	brpl	.-8      	; 0xbbc <DIO_WritePin+0xf4>
     bc4:	cb 01       	movw	r24, r22
     bc6:	80 95       	com	r24
     bc8:	84 23       	and	r24, r20
     bca:	82 bb       	out	0x12, r24	; 18
     bcc:	08 95       	ret

00000bce <__vector_1>:


/*******************************ISR********************************/

ISR(INT0_vect)
{
     bce:	1f 92       	push	r1
     bd0:	0f 92       	push	r0
     bd2:	0f b6       	in	r0, 0x3f	; 63
     bd4:	0f 92       	push	r0
     bd6:	11 24       	eor	r1, r1
     bd8:	2f 93       	push	r18
     bda:	3f 93       	push	r19
     bdc:	4f 93       	push	r20
     bde:	5f 93       	push	r21
     be0:	6f 93       	push	r22
     be2:	7f 93       	push	r23
     be4:	8f 93       	push	r24
     be6:	9f 93       	push	r25
     be8:	af 93       	push	r26
     bea:	bf 93       	push	r27
     bec:	ef 93       	push	r30
     bee:	ff 93       	push	r31
	if (INT0_Fptr!=NULL_PTR)
     bf0:	e0 91 dc 00 	lds	r30, 0x00DC	; 0x8000dc <INT0_Fptr>
     bf4:	f0 91 dd 00 	lds	r31, 0x00DD	; 0x8000dd <INT0_Fptr+0x1>
     bf8:	30 97       	sbiw	r30, 0x00	; 0
     bfa:	09 f0       	breq	.+2      	; 0xbfe <__vector_1+0x30>
	{
		INT0_Fptr();
     bfc:	09 95       	icall
	}
	
}
     bfe:	ff 91       	pop	r31
     c00:	ef 91       	pop	r30
     c02:	bf 91       	pop	r27
     c04:	af 91       	pop	r26
     c06:	9f 91       	pop	r25
     c08:	8f 91       	pop	r24
     c0a:	7f 91       	pop	r23
     c0c:	6f 91       	pop	r22
     c0e:	5f 91       	pop	r21
     c10:	4f 91       	pop	r20
     c12:	3f 91       	pop	r19
     c14:	2f 91       	pop	r18
     c16:	0f 90       	pop	r0
     c18:	0f be       	out	0x3f, r0	; 63
     c1a:	0f 90       	pop	r0
     c1c:	1f 90       	pop	r1
     c1e:	18 95       	reti

00000c20 <__vector_2>:
ISR(INT1_vect)
{
     c20:	1f 92       	push	r1
     c22:	0f 92       	push	r0
     c24:	0f b6       	in	r0, 0x3f	; 63
     c26:	0f 92       	push	r0
     c28:	11 24       	eor	r1, r1
     c2a:	2f 93       	push	r18
     c2c:	3f 93       	push	r19
     c2e:	4f 93       	push	r20
     c30:	5f 93       	push	r21
     c32:	6f 93       	push	r22
     c34:	7f 93       	push	r23
     c36:	8f 93       	push	r24
     c38:	9f 93       	push	r25
     c3a:	af 93       	push	r26
     c3c:	bf 93       	push	r27
     c3e:	ef 93       	push	r30
     c40:	ff 93       	push	r31
	
	
	if (INT1_Fptr!=NULL_PTR)
     c42:	e0 91 da 00 	lds	r30, 0x00DA	; 0x8000da <INT1_Fptr>
     c46:	f0 91 db 00 	lds	r31, 0x00DB	; 0x8000db <INT1_Fptr+0x1>
     c4a:	30 97       	sbiw	r30, 0x00	; 0
     c4c:	09 f0       	breq	.+2      	; 0xc50 <__vector_2+0x30>
	{
		INT1_Fptr();
     c4e:	09 95       	icall
	}
}
     c50:	ff 91       	pop	r31
     c52:	ef 91       	pop	r30
     c54:	bf 91       	pop	r27
     c56:	af 91       	pop	r26
     c58:	9f 91       	pop	r25
     c5a:	8f 91       	pop	r24
     c5c:	7f 91       	pop	r23
     c5e:	6f 91       	pop	r22
     c60:	5f 91       	pop	r21
     c62:	4f 91       	pop	r20
     c64:	3f 91       	pop	r19
     c66:	2f 91       	pop	r18
     c68:	0f 90       	pop	r0
     c6a:	0f be       	out	0x3f, r0	; 63
     c6c:	0f 90       	pop	r0
     c6e:	1f 90       	pop	r1
     c70:	18 95       	reti

00000c72 <__vector_3>:
ISR(INT2_vect)
{
     c72:	1f 92       	push	r1
     c74:	0f 92       	push	r0
     c76:	0f b6       	in	r0, 0x3f	; 63
     c78:	0f 92       	push	r0
     c7a:	11 24       	eor	r1, r1
     c7c:	2f 93       	push	r18
     c7e:	3f 93       	push	r19
     c80:	4f 93       	push	r20
     c82:	5f 93       	push	r21
     c84:	6f 93       	push	r22
     c86:	7f 93       	push	r23
     c88:	8f 93       	push	r24
     c8a:	9f 93       	push	r25
     c8c:	af 93       	push	r26
     c8e:	bf 93       	push	r27
     c90:	ef 93       	push	r30
     c92:	ff 93       	push	r31
	if (INT2_Fptr!=NULL_PTR)
     c94:	e0 91 d8 00 	lds	r30, 0x00D8	; 0x8000d8 <INT2_Fptr>
     c98:	f0 91 d9 00 	lds	r31, 0x00D9	; 0x8000d9 <INT2_Fptr+0x1>
     c9c:	30 97       	sbiw	r30, 0x00	; 0
     c9e:	09 f0       	breq	.+2      	; 0xca2 <__vector_3+0x30>
	{
		INT2_Fptr();
     ca0:	09 95       	icall
	}
	
     ca2:	ff 91       	pop	r31
     ca4:	ef 91       	pop	r30
     ca6:	bf 91       	pop	r27
     ca8:	af 91       	pop	r26
     caa:	9f 91       	pop	r25
     cac:	8f 91       	pop	r24
     cae:	7f 91       	pop	r23
     cb0:	6f 91       	pop	r22
     cb2:	5f 91       	pop	r21
     cb4:	4f 91       	pop	r20
     cb6:	3f 91       	pop	r19
     cb8:	2f 91       	pop	r18
     cba:	0f 90       	pop	r0
     cbc:	0f be       	out	0x3f, r0	; 63
     cbe:	0f 90       	pop	r0
     cc0:	1f 90       	pop	r1
     cc2:	18 95       	reti

00000cc4 <__vector_12>:
{
	CLR_BIT(SPCR,SPIE);
}

ISR(SPI_STC_vect)
{
     cc4:	1f 92       	push	r1
     cc6:	0f 92       	push	r0
     cc8:	0f b6       	in	r0, 0x3f	; 63
     cca:	0f 92       	push	r0
     ccc:	11 24       	eor	r1, r1
     cce:	2f 93       	push	r18
     cd0:	3f 93       	push	r19
     cd2:	4f 93       	push	r20
     cd4:	5f 93       	push	r21
     cd6:	6f 93       	push	r22
     cd8:	7f 93       	push	r23
     cda:	8f 93       	push	r24
     cdc:	9f 93       	push	r25
     cde:	af 93       	push	r26
     ce0:	bf 93       	push	r27
     ce2:	ef 93       	push	r30
     ce4:	ff 93       	push	r31
	if (SPI_Fptr!=NULL_PTR)
     ce6:	e0 91 de 00 	lds	r30, 0x00DE	; 0x8000de <SPI_Fptr>
     cea:	f0 91 df 00 	lds	r31, 0x00DF	; 0x8000df <SPI_Fptr+0x1>
     cee:	30 97       	sbiw	r30, 0x00	; 0
     cf0:	09 f0       	breq	.+2      	; 0xcf4 <__vector_12+0x30>
	{
		SPI_Fptr();
     cf2:	09 95       	icall
		
	}
     cf4:	ff 91       	pop	r31
     cf6:	ef 91       	pop	r30
     cf8:	bf 91       	pop	r27
     cfa:	af 91       	pop	r26
     cfc:	9f 91       	pop	r25
     cfe:	8f 91       	pop	r24
     d00:	7f 91       	pop	r23
     d02:	6f 91       	pop	r22
     d04:	5f 91       	pop	r21
     d06:	4f 91       	pop	r20
     d08:	3f 91       	pop	r19
     d0a:	2f 91       	pop	r18
     d0c:	0f 90       	pop	r0
     d0e:	0f be       	out	0x3f, r0	; 63
     d10:	0f 90       	pop	r0
     d12:	1f 90       	pop	r1
     d14:	18 95       	reti

00000d16 <__vector_11>:
/*************************************************************************/

/*************************TIMER0 ISR*************************************/

ISR(TIMER0_OVF_vect)
{
     d16:	1f 92       	push	r1
     d18:	0f 92       	push	r0
     d1a:	0f b6       	in	r0, 0x3f	; 63
     d1c:	0f 92       	push	r0
     d1e:	11 24       	eor	r1, r1
     d20:	2f 93       	push	r18
     d22:	3f 93       	push	r19
     d24:	4f 93       	push	r20
     d26:	5f 93       	push	r21
     d28:	6f 93       	push	r22
     d2a:	7f 93       	push	r23
     d2c:	8f 93       	push	r24
     d2e:	9f 93       	push	r25
     d30:	af 93       	push	r26
     d32:	bf 93       	push	r27
     d34:	ef 93       	push	r30
     d36:	ff 93       	push	r31
	if (Timer0_OVF_Fptr!=NULL_PTR)
     d38:	e0 91 e2 00 	lds	r30, 0x00E2	; 0x8000e2 <Timer0_OVF_Fptr>
     d3c:	f0 91 e3 00 	lds	r31, 0x00E3	; 0x8000e3 <Timer0_OVF_Fptr+0x1>
     d40:	30 97       	sbiw	r30, 0x00	; 0
     d42:	09 f0       	breq	.+2      	; 0xd46 <__vector_11+0x30>
	{
		Timer0_OVF_Fptr();
     d44:	09 95       	icall
	}
}
     d46:	ff 91       	pop	r31
     d48:	ef 91       	pop	r30
     d4a:	bf 91       	pop	r27
     d4c:	af 91       	pop	r26
     d4e:	9f 91       	pop	r25
     d50:	8f 91       	pop	r24
     d52:	7f 91       	pop	r23
     d54:	6f 91       	pop	r22
     d56:	5f 91       	pop	r21
     d58:	4f 91       	pop	r20
     d5a:	3f 91       	pop	r19
     d5c:	2f 91       	pop	r18
     d5e:	0f 90       	pop	r0
     d60:	0f be       	out	0x3f, r0	; 63
     d62:	0f 90       	pop	r0
     d64:	1f 90       	pop	r1
     d66:	18 95       	reti

00000d68 <__vector_10>:

ISR(TIMER0_OC_vect)
{
     d68:	1f 92       	push	r1
     d6a:	0f 92       	push	r0
     d6c:	0f b6       	in	r0, 0x3f	; 63
     d6e:	0f 92       	push	r0
     d70:	11 24       	eor	r1, r1
     d72:	2f 93       	push	r18
     d74:	3f 93       	push	r19
     d76:	4f 93       	push	r20
     d78:	5f 93       	push	r21
     d7a:	6f 93       	push	r22
     d7c:	7f 93       	push	r23
     d7e:	8f 93       	push	r24
     d80:	9f 93       	push	r25
     d82:	af 93       	push	r26
     d84:	bf 93       	push	r27
     d86:	ef 93       	push	r30
     d88:	ff 93       	push	r31
	if (Timer0_OC_Fptr!=NULL_PTR)
     d8a:	e0 91 e0 00 	lds	r30, 0x00E0	; 0x8000e0 <Timer0_OC_Fptr>
     d8e:	f0 91 e1 00 	lds	r31, 0x00E1	; 0x8000e1 <Timer0_OC_Fptr+0x1>
     d92:	30 97       	sbiw	r30, 0x00	; 0
     d94:	09 f0       	breq	.+2      	; 0xd98 <__vector_10+0x30>
	{
		Timer0_OC_Fptr();
     d96:	09 95       	icall
	}
}
     d98:	ff 91       	pop	r31
     d9a:	ef 91       	pop	r30
     d9c:	bf 91       	pop	r27
     d9e:	af 91       	pop	r26
     da0:	9f 91       	pop	r25
     da2:	8f 91       	pop	r24
     da4:	7f 91       	pop	r23
     da6:	6f 91       	pop	r22
     da8:	5f 91       	pop	r21
     daa:	4f 91       	pop	r20
     dac:	3f 91       	pop	r19
     dae:	2f 91       	pop	r18
     db0:	0f 90       	pop	r0
     db2:	0f be       	out	0x3f, r0	; 63
     db4:	0f 90       	pop	r0
     db6:	1f 90       	pop	r1
     db8:	18 95       	reti

00000dba <__vector_9>:
/*********************isrs ********************/



ISR(TIMER1_OVF_vect)
{
     dba:	1f 92       	push	r1
     dbc:	0f 92       	push	r0
     dbe:	0f b6       	in	r0, 0x3f	; 63
     dc0:	0f 92       	push	r0
     dc2:	11 24       	eor	r1, r1
     dc4:	2f 93       	push	r18
     dc6:	3f 93       	push	r19
     dc8:	4f 93       	push	r20
     dca:	5f 93       	push	r21
     dcc:	6f 93       	push	r22
     dce:	7f 93       	push	r23
     dd0:	8f 93       	push	r24
     dd2:	9f 93       	push	r25
     dd4:	af 93       	push	r26
     dd6:	bf 93       	push	r27
     dd8:	ef 93       	push	r30
     dda:	ff 93       	push	r31
	if(Timer1_OVF_Fptr!=NULL_PTR)
     ddc:	e0 91 ea 00 	lds	r30, 0x00EA	; 0x8000ea <Timer1_OVF_Fptr>
     de0:	f0 91 eb 00 	lds	r31, 0x00EB	; 0x8000eb <Timer1_OVF_Fptr+0x1>
     de4:	30 97       	sbiw	r30, 0x00	; 0
     de6:	09 f0       	breq	.+2      	; 0xdea <__vector_9+0x30>
	{
		Timer1_OVF_Fptr();
     de8:	09 95       	icall
	}
}
     dea:	ff 91       	pop	r31
     dec:	ef 91       	pop	r30
     dee:	bf 91       	pop	r27
     df0:	af 91       	pop	r26
     df2:	9f 91       	pop	r25
     df4:	8f 91       	pop	r24
     df6:	7f 91       	pop	r23
     df8:	6f 91       	pop	r22
     dfa:	5f 91       	pop	r21
     dfc:	4f 91       	pop	r20
     dfe:	3f 91       	pop	r19
     e00:	2f 91       	pop	r18
     e02:	0f 90       	pop	r0
     e04:	0f be       	out	0x3f, r0	; 63
     e06:	0f 90       	pop	r0
     e08:	1f 90       	pop	r1
     e0a:	18 95       	reti

00000e0c <__vector_7>:
ISR(TIMER1_OCA_vect)
{
     e0c:	1f 92       	push	r1
     e0e:	0f 92       	push	r0
     e10:	0f b6       	in	r0, 0x3f	; 63
     e12:	0f 92       	push	r0
     e14:	11 24       	eor	r1, r1
     e16:	2f 93       	push	r18
     e18:	3f 93       	push	r19
     e1a:	4f 93       	push	r20
     e1c:	5f 93       	push	r21
     e1e:	6f 93       	push	r22
     e20:	7f 93       	push	r23
     e22:	8f 93       	push	r24
     e24:	9f 93       	push	r25
     e26:	af 93       	push	r26
     e28:	bf 93       	push	r27
     e2a:	ef 93       	push	r30
     e2c:	ff 93       	push	r31
	if(Timer1_OCA_Fptr!=NULL_PTR)
     e2e:	e0 91 e8 00 	lds	r30, 0x00E8	; 0x8000e8 <Timer1_OCA_Fptr>
     e32:	f0 91 e9 00 	lds	r31, 0x00E9	; 0x8000e9 <Timer1_OCA_Fptr+0x1>
     e36:	30 97       	sbiw	r30, 0x00	; 0
     e38:	09 f0       	breq	.+2      	; 0xe3c <__vector_7+0x30>
	{
		Timer1_OCA_Fptr();
     e3a:	09 95       	icall
	}

	
}
     e3c:	ff 91       	pop	r31
     e3e:	ef 91       	pop	r30
     e40:	bf 91       	pop	r27
     e42:	af 91       	pop	r26
     e44:	9f 91       	pop	r25
     e46:	8f 91       	pop	r24
     e48:	7f 91       	pop	r23
     e4a:	6f 91       	pop	r22
     e4c:	5f 91       	pop	r21
     e4e:	4f 91       	pop	r20
     e50:	3f 91       	pop	r19
     e52:	2f 91       	pop	r18
     e54:	0f 90       	pop	r0
     e56:	0f be       	out	0x3f, r0	; 63
     e58:	0f 90       	pop	r0
     e5a:	1f 90       	pop	r1
     e5c:	18 95       	reti

00000e5e <__vector_8>:
ISR(TIMER1_OCB_vect)
{
     e5e:	1f 92       	push	r1
     e60:	0f 92       	push	r0
     e62:	0f b6       	in	r0, 0x3f	; 63
     e64:	0f 92       	push	r0
     e66:	11 24       	eor	r1, r1
     e68:	2f 93       	push	r18
     e6a:	3f 93       	push	r19
     e6c:	4f 93       	push	r20
     e6e:	5f 93       	push	r21
     e70:	6f 93       	push	r22
     e72:	7f 93       	push	r23
     e74:	8f 93       	push	r24
     e76:	9f 93       	push	r25
     e78:	af 93       	push	r26
     e7a:	bf 93       	push	r27
     e7c:	ef 93       	push	r30
     e7e:	ff 93       	push	r31
	if(Timer1_OCB_Fptr!=NULL_PTR)
     e80:	e0 91 e6 00 	lds	r30, 0x00E6	; 0x8000e6 <Timer1_OCB_Fptr>
     e84:	f0 91 e7 00 	lds	r31, 0x00E7	; 0x8000e7 <Timer1_OCB_Fptr+0x1>
     e88:	30 97       	sbiw	r30, 0x00	; 0
     e8a:	09 f0       	breq	.+2      	; 0xe8e <__vector_8+0x30>
	{
		Timer1_OCB_Fptr();
     e8c:	09 95       	icall
	}
}
     e8e:	ff 91       	pop	r31
     e90:	ef 91       	pop	r30
     e92:	bf 91       	pop	r27
     e94:	af 91       	pop	r26
     e96:	9f 91       	pop	r25
     e98:	8f 91       	pop	r24
     e9a:	7f 91       	pop	r23
     e9c:	6f 91       	pop	r22
     e9e:	5f 91       	pop	r21
     ea0:	4f 91       	pop	r20
     ea2:	3f 91       	pop	r19
     ea4:	2f 91       	pop	r18
     ea6:	0f 90       	pop	r0
     ea8:	0f be       	out	0x3f, r0	; 63
     eaa:	0f 90       	pop	r0
     eac:	1f 90       	pop	r1
     eae:	18 95       	reti

00000eb0 <__vector_6>:
ISR(TIMER1_ICU_vect)
{
     eb0:	1f 92       	push	r1
     eb2:	0f 92       	push	r0
     eb4:	0f b6       	in	r0, 0x3f	; 63
     eb6:	0f 92       	push	r0
     eb8:	11 24       	eor	r1, r1
     eba:	2f 93       	push	r18
     ebc:	3f 93       	push	r19
     ebe:	4f 93       	push	r20
     ec0:	5f 93       	push	r21
     ec2:	6f 93       	push	r22
     ec4:	7f 93       	push	r23
     ec6:	8f 93       	push	r24
     ec8:	9f 93       	push	r25
     eca:	af 93       	push	r26
     ecc:	bf 93       	push	r27
     ece:	ef 93       	push	r30
     ed0:	ff 93       	push	r31
	if(Timer1_ICU_Fptr!=NULL_PTR)
     ed2:	e0 91 e4 00 	lds	r30, 0x00E4	; 0x8000e4 <Timer1_ICU_Fptr>
     ed6:	f0 91 e5 00 	lds	r31, 0x00E5	; 0x8000e5 <Timer1_ICU_Fptr+0x1>
     eda:	30 97       	sbiw	r30, 0x00	; 0
     edc:	09 f0       	breq	.+2      	; 0xee0 <__vector_6+0x30>
	{
		Timer1_ICU_Fptr();
     ede:	09 95       	icall
	}
     ee0:	ff 91       	pop	r31
     ee2:	ef 91       	pop	r30
     ee4:	bf 91       	pop	r27
     ee6:	af 91       	pop	r26
     ee8:	9f 91       	pop	r25
     eea:	8f 91       	pop	r24
     eec:	7f 91       	pop	r23
     eee:	6f 91       	pop	r22
     ef0:	5f 91       	pop	r21
     ef2:	4f 91       	pop	r20
     ef4:	3f 91       	pop	r19
     ef6:	2f 91       	pop	r18
     ef8:	0f 90       	pop	r0
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	0f 90       	pop	r0
     efe:	1f 90       	pop	r1
     f00:	18 95       	reti

00000f02 <__vector_13>:
	UART_TX_Fptr = LocalFptr;
}


ISR(UART_RX_vect)
{
     f02:	1f 92       	push	r1
     f04:	0f 92       	push	r0
     f06:	0f b6       	in	r0, 0x3f	; 63
     f08:	0f 92       	push	r0
     f0a:	11 24       	eor	r1, r1
     f0c:	2f 93       	push	r18
     f0e:	3f 93       	push	r19
     f10:	4f 93       	push	r20
     f12:	5f 93       	push	r21
     f14:	6f 93       	push	r22
     f16:	7f 93       	push	r23
     f18:	8f 93       	push	r24
     f1a:	9f 93       	push	r25
     f1c:	af 93       	push	r26
     f1e:	bf 93       	push	r27
     f20:	ef 93       	push	r30
     f22:	ff 93       	push	r31
	if (UART_RX_Fptr!=NULL_PTR)
     f24:	e0 91 ee 00 	lds	r30, 0x00EE	; 0x8000ee <UART_RX_Fptr>
     f28:	f0 91 ef 00 	lds	r31, 0x00EF	; 0x8000ef <UART_RX_Fptr+0x1>
     f2c:	30 97       	sbiw	r30, 0x00	; 0
     f2e:	09 f0       	breq	.+2      	; 0xf32 <__vector_13+0x30>
	{
		UART_RX_Fptr();
     f30:	09 95       	icall
	}
}
     f32:	ff 91       	pop	r31
     f34:	ef 91       	pop	r30
     f36:	bf 91       	pop	r27
     f38:	af 91       	pop	r26
     f3a:	9f 91       	pop	r25
     f3c:	8f 91       	pop	r24
     f3e:	7f 91       	pop	r23
     f40:	6f 91       	pop	r22
     f42:	5f 91       	pop	r21
     f44:	4f 91       	pop	r20
     f46:	3f 91       	pop	r19
     f48:	2f 91       	pop	r18
     f4a:	0f 90       	pop	r0
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	0f 90       	pop	r0
     f50:	1f 90       	pop	r1
     f52:	18 95       	reti

00000f54 <__vector_15>:

ISR(UART_TX_vect)
{
     f54:	1f 92       	push	r1
     f56:	0f 92       	push	r0
     f58:	0f b6       	in	r0, 0x3f	; 63
     f5a:	0f 92       	push	r0
     f5c:	11 24       	eor	r1, r1
     f5e:	2f 93       	push	r18
     f60:	3f 93       	push	r19
     f62:	4f 93       	push	r20
     f64:	5f 93       	push	r21
     f66:	6f 93       	push	r22
     f68:	7f 93       	push	r23
     f6a:	8f 93       	push	r24
     f6c:	9f 93       	push	r25
     f6e:	af 93       	push	r26
     f70:	bf 93       	push	r27
     f72:	ef 93       	push	r30
     f74:	ff 93       	push	r31
	if (UART_TX_Fptr!=NULL_PTR)
     f76:	e0 91 ec 00 	lds	r30, 0x00EC	; 0x8000ec <UART_TX_Fptr>
     f7a:	f0 91 ed 00 	lds	r31, 0x00ED	; 0x8000ed <UART_TX_Fptr+0x1>
     f7e:	30 97       	sbiw	r30, 0x00	; 0
     f80:	09 f0       	breq	.+2      	; 0xf84 <__vector_15+0x30>
	{
		UART_TX_Fptr();
     f82:	09 95       	icall
	}
     f84:	ff 91       	pop	r31
     f86:	ef 91       	pop	r30
     f88:	bf 91       	pop	r27
     f8a:	af 91       	pop	r26
     f8c:	9f 91       	pop	r25
     f8e:	8f 91       	pop	r24
     f90:	7f 91       	pop	r23
     f92:	6f 91       	pop	r22
     f94:	5f 91       	pop	r21
     f96:	4f 91       	pop	r20
     f98:	3f 91       	pop	r19
     f9a:	2f 91       	pop	r18
     f9c:	0f 90       	pop	r0
     f9e:	0f be       	out	0x3f, r0	; 63
     fa0:	0f 90       	pop	r0
     fa2:	1f 90       	pop	r1
     fa4:	18 95       	reti

00000fa6 <__udivmodsi4>:
     fa6:	a1 e2       	ldi	r26, 0x21	; 33
     fa8:	1a 2e       	mov	r1, r26
     faa:	aa 1b       	sub	r26, r26
     fac:	bb 1b       	sub	r27, r27
     fae:	fd 01       	movw	r30, r26
     fb0:	0d c0       	rjmp	.+26     	; 0xfcc <__udivmodsi4_ep>

00000fb2 <__udivmodsi4_loop>:
     fb2:	aa 1f       	adc	r26, r26
     fb4:	bb 1f       	adc	r27, r27
     fb6:	ee 1f       	adc	r30, r30
     fb8:	ff 1f       	adc	r31, r31
     fba:	a2 17       	cp	r26, r18
     fbc:	b3 07       	cpc	r27, r19
     fbe:	e4 07       	cpc	r30, r20
     fc0:	f5 07       	cpc	r31, r21
     fc2:	20 f0       	brcs	.+8      	; 0xfcc <__udivmodsi4_ep>
     fc4:	a2 1b       	sub	r26, r18
     fc6:	b3 0b       	sbc	r27, r19
     fc8:	e4 0b       	sbc	r30, r20
     fca:	f5 0b       	sbc	r31, r21

00000fcc <__udivmodsi4_ep>:
     fcc:	66 1f       	adc	r22, r22
     fce:	77 1f       	adc	r23, r23
     fd0:	88 1f       	adc	r24, r24
     fd2:	99 1f       	adc	r25, r25
     fd4:	1a 94       	dec	r1
     fd6:	69 f7       	brne	.-38     	; 0xfb2 <__udivmodsi4_loop>
     fd8:	60 95       	com	r22
     fda:	70 95       	com	r23
     fdc:	80 95       	com	r24
     fde:	90 95       	com	r25
     fe0:	9b 01       	movw	r18, r22
     fe2:	ac 01       	movw	r20, r24
     fe4:	bd 01       	movw	r22, r26
     fe6:	cf 01       	movw	r24, r30
     fe8:	08 95       	ret

00000fea <__divmodsi4>:
     fea:	05 2e       	mov	r0, r21
     fec:	97 fb       	bst	r25, 7
     fee:	1e f4       	brtc	.+6      	; 0xff6 <__divmodsi4+0xc>
     ff0:	00 94       	com	r0
     ff2:	0e 94 0c 08 	call	0x1018	; 0x1018 <__negsi2>
     ff6:	57 fd       	sbrc	r21, 7
     ff8:	07 d0       	rcall	.+14     	; 0x1008 <__divmodsi4_neg2>
     ffa:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <__udivmodsi4>
     ffe:	07 fc       	sbrc	r0, 7
    1000:	03 d0       	rcall	.+6      	; 0x1008 <__divmodsi4_neg2>
    1002:	4e f4       	brtc	.+18     	; 0x1016 <__divmodsi4_exit>
    1004:	0c 94 0c 08 	jmp	0x1018	; 0x1018 <__negsi2>

00001008 <__divmodsi4_neg2>:
    1008:	50 95       	com	r21
    100a:	40 95       	com	r20
    100c:	30 95       	com	r19
    100e:	21 95       	neg	r18
    1010:	3f 4f       	sbci	r19, 0xFF	; 255
    1012:	4f 4f       	sbci	r20, 0xFF	; 255
    1014:	5f 4f       	sbci	r21, 0xFF	; 255

00001016 <__divmodsi4_exit>:
    1016:	08 95       	ret

00001018 <__negsi2>:
    1018:	90 95       	com	r25
    101a:	80 95       	com	r24
    101c:	70 95       	com	r23
    101e:	61 95       	neg	r22
    1020:	7f 4f       	sbci	r23, 0xFF	; 255
    1022:	8f 4f       	sbci	r24, 0xFF	; 255
    1024:	9f 4f       	sbci	r25, 0xFF	; 255
    1026:	08 95       	ret

00001028 <_exit>:
    1028:	f8 94       	cli

0000102a <__stop_program>:
    102a:	ff cf       	rjmp	.-2      	; 0x102a <__stop_program>
